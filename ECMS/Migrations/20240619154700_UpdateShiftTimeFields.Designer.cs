// <auto-generated />
using System;
using ECMS.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECMS.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240619154700_UpdateShiftTimeFields")]
    partial class UpdateShiftTimeFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.4.24267.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ECMS.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BuildingNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BuildingNo = "45092",
                            City = "Lenoraberg",
                            Street = "Dakota Isle"
                        },
                        new
                        {
                            Id = 2,
                            BuildingNo = "45690",
                            City = "South Mariam",
                            Street = "Demetris Ridge"
                        },
                        new
                        {
                            Id = 3,
                            BuildingNo = "8263",
                            City = "Anashire",
                            Street = "Trent Expressway"
                        },
                        new
                        {
                            Id = 4,
                            BuildingNo = "8027",
                            City = "New Sadiefort",
                            Street = "Sauer Trail"
                        },
                        new
                        {
                            Id = 5,
                            BuildingNo = "45434",
                            City = "Kiehnbury",
                            Street = "Littel Throughway"
                        },
                        new
                        {
                            Id = 6,
                            BuildingNo = "764",
                            City = "New Darrinburgh",
                            Street = "Queenie Fort"
                        },
                        new
                        {
                            Id = 7,
                            BuildingNo = "497",
                            City = "Stonetown",
                            Street = "Alexa Plains"
                        },
                        new
                        {
                            Id = 8,
                            BuildingNo = "4073",
                            City = "Farrellton",
                            Street = "Upton Groves"
                        },
                        new
                        {
                            Id = 9,
                            BuildingNo = "67125",
                            City = "Graycechester",
                            Street = "Paucek Station"
                        },
                        new
                        {
                            Id = 10,
                            BuildingNo = "701",
                            City = "East Leslyville",
                            Street = "West Walk"
                        });
                });

            modelBuilder.Entity("ECMS.Models.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.ToTable("areas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 111,
                            Description = "Quae eaque qui sit ea dicta enim tempore consectetur.",
                            FacilityId = 1,
                            IsAvailable = true,
                            Name = "Distributed responsive customer loyalty"
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 83,
                            Description = "Quidem quia consequuntur voluptas accusantium eos et saepe beatae.",
                            FacilityId = 1,
                            IsAvailable = false,
                            Name = "Synergized background benchmark"
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 89,
                            Description = "Et non minima et nam.",
                            FacilityId = 1,
                            IsAvailable = false,
                            Name = "Face to face exuding encryption"
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 97,
                            Description = "Nihil voluptatum laboriosam amet.",
                            FacilityId = 1,
                            IsAvailable = true,
                            Name = "Compatible non-volatile website"
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 59,
                            Description = "Dignissimos beatae dolorem corporis aliquam at autem doloribus placeat.",
                            FacilityId = 1,
                            IsAvailable = false,
                            Name = "Integrated modular migration"
                        },
                        new
                        {
                            Id = 6,
                            Capacity = 182,
                            Description = "Inventore nesciunt non provident fugit ea illo ullam reprehenderit.",
                            FacilityId = 2,
                            IsAvailable = false,
                            Name = "Switchable logistical interface"
                        },
                        new
                        {
                            Id = 7,
                            Capacity = 73,
                            Description = "Recusandae doloremque enim sunt.",
                            FacilityId = 2,
                            IsAvailable = false,
                            Name = "Re-contextualized motivating intranet"
                        },
                        new
                        {
                            Id = 8,
                            Capacity = 59,
                            Description = "Quos non quaerat eligendi labore non magnam magni commodi.",
                            FacilityId = 2,
                            IsAvailable = true,
                            Name = "Extended stable support"
                        },
                        new
                        {
                            Id = 9,
                            Capacity = 51,
                            Description = "Dolor molestiae qui.",
                            FacilityId = 2,
                            IsAvailable = false,
                            Name = "Open-source systematic intranet"
                        },
                        new
                        {
                            Id = 10,
                            Capacity = 142,
                            Description = "Impedit voluptatem nulla pariatur error fugiat.",
                            FacilityId = 2,
                            IsAvailable = true,
                            Name = "Customizable contextually-based policy"
                        },
                        new
                        {
                            Id = 11,
                            Capacity = 184,
                            Description = "Aliquam laudantium optio.",
                            FacilityId = 3,
                            IsAvailable = false,
                            Name = "Front-line leading edge installation"
                        },
                        new
                        {
                            Id = 12,
                            Capacity = 117,
                            Description = "Et eligendi non qui similique quasi est labore soluta.",
                            FacilityId = 3,
                            IsAvailable = true,
                            Name = "Multi-channelled high-level database"
                        },
                        new
                        {
                            Id = 13,
                            Capacity = 185,
                            Description = "Corrupti repudiandae quam sit iusto itaque velit ut consequatur.",
                            FacilityId = 3,
                            IsAvailable = false,
                            Name = "Implemented executive ability"
                        },
                        new
                        {
                            Id = 14,
                            Capacity = 171,
                            Description = "Maxime ducimus rerum impedit aut modi error numquam qui.",
                            FacilityId = 3,
                            IsAvailable = false,
                            Name = "Right-sized foreground local area network"
                        },
                        new
                        {
                            Id = 15,
                            Capacity = 89,
                            Description = "Voluptatem id non autem consequatur et sed ut.",
                            FacilityId = 3,
                            IsAvailable = true,
                            Name = "Adaptive tangible open architecture"
                        },
                        new
                        {
                            Id = 16,
                            Capacity = 156,
                            Description = "Tenetur voluptatibus alias libero.",
                            FacilityId = 4,
                            IsAvailable = true,
                            Name = "Reduced multimedia collaboration"
                        },
                        new
                        {
                            Id = 17,
                            Capacity = 50,
                            Description = "Ab delectus et ea assumenda.",
                            FacilityId = 4,
                            IsAvailable = false,
                            Name = "Compatible object-oriented capacity"
                        },
                        new
                        {
                            Id = 18,
                            Capacity = 130,
                            Description = "Qui nobis debitis animi et veritatis voluptatem voluptatem.",
                            FacilityId = 4,
                            IsAvailable = false,
                            Name = "Up-sized zero administration task-force"
                        },
                        new
                        {
                            Id = 19,
                            Capacity = 63,
                            Description = "Neque et et aperiam debitis ut.",
                            FacilityId = 4,
                            IsAvailable = false,
                            Name = "Vision-oriented system-worthy policy"
                        },
                        new
                        {
                            Id = 20,
                            Capacity = 107,
                            Description = "Hic harum atque sint alias qui fugit.",
                            FacilityId = 4,
                            IsAvailable = false,
                            Name = "Proactive heuristic superstructure"
                        },
                        new
                        {
                            Id = 21,
                            Capacity = 107,
                            Description = "Rerum aut et.",
                            FacilityId = 5,
                            IsAvailable = true,
                            Name = "Front-line composite database"
                        },
                        new
                        {
                            Id = 22,
                            Capacity = 109,
                            Description = "Aut qui non quos nostrum accusantium.",
                            FacilityId = 5,
                            IsAvailable = true,
                            Name = "Right-sized user-facing intranet"
                        },
                        new
                        {
                            Id = 23,
                            Capacity = 164,
                            Description = "Eaque perferendis omnis enim reiciendis nemo quod est ea.",
                            FacilityId = 5,
                            IsAvailable = true,
                            Name = "Organized stable budgetary management"
                        },
                        new
                        {
                            Id = 24,
                            Capacity = 167,
                            Description = "Soluta maxime sit eius quos nostrum ratione.",
                            FacilityId = 5,
                            IsAvailable = true,
                            Name = "Reverse-engineered attitude-oriented framework"
                        },
                        new
                        {
                            Id = 25,
                            Capacity = 58,
                            Description = "Repellendus officiis veniam cumque quasi voluptates nam voluptate.",
                            FacilityId = 5,
                            IsAvailable = true,
                            Name = "Proactive fresh-thinking monitoring"
                        },
                        new
                        {
                            Id = 26,
                            Capacity = 53,
                            Description = "Maxime dolor enim ad non consequatur perspiciatis deserunt quibusdam sed.",
                            FacilityId = 6,
                            IsAvailable = true,
                            Name = "Virtual analyzing leverage"
                        },
                        new
                        {
                            Id = 27,
                            Capacity = 177,
                            Description = "Et quia sunt quam sed quia omnis laboriosam.",
                            FacilityId = 6,
                            IsAvailable = false,
                            Name = "Advanced mission-critical initiative"
                        },
                        new
                        {
                            Id = 28,
                            Capacity = 86,
                            Description = "Id aliquam qui porro deserunt corrupti.",
                            FacilityId = 6,
                            IsAvailable = false,
                            Name = "Public-key contextually-based structure"
                        },
                        new
                        {
                            Id = 29,
                            Capacity = 53,
                            Description = "Repellendus quo labore facilis rerum qui nihil velit ea.",
                            FacilityId = 6,
                            IsAvailable = true,
                            Name = "Devolved explicit adapter"
                        },
                        new
                        {
                            Id = 30,
                            Capacity = 168,
                            Description = "Ipsum id beatae consequatur molestias doloribus dolor illo voluptatem.",
                            FacilityId = 6,
                            IsAvailable = false,
                            Name = "Expanded grid-enabled pricing structure"
                        },
                        new
                        {
                            Id = 31,
                            Capacity = 58,
                            Description = "Illo quia culpa provident odio voluptatem optio a dolorum.",
                            FacilityId = 7,
                            IsAvailable = true,
                            Name = "Operative encompassing local area network"
                        },
                        new
                        {
                            Id = 32,
                            Capacity = 141,
                            Description = "Rerum alias aut et odio magni voluptate.",
                            FacilityId = 7,
                            IsAvailable = true,
                            Name = "Upgradable systematic productivity"
                        },
                        new
                        {
                            Id = 33,
                            Capacity = 90,
                            Description = "Dolores at autem id ea.",
                            FacilityId = 7,
                            IsAvailable = false,
                            Name = "Visionary background groupware"
                        },
                        new
                        {
                            Id = 34,
                            Capacity = 143,
                            Description = "Sunt omnis optio exercitationem possimus optio nostrum possimus eaque.",
                            FacilityId = 7,
                            IsAvailable = true,
                            Name = "Right-sized encompassing installation"
                        },
                        new
                        {
                            Id = 35,
                            Capacity = 132,
                            Description = "Quis quia cupiditate illo quod.",
                            FacilityId = 7,
                            IsAvailable = false,
                            Name = "Pre-emptive stable benchmark"
                        },
                        new
                        {
                            Id = 36,
                            Capacity = 147,
                            Description = "Minus qui facere sint eum officia dolorum sapiente ipsam velit.",
                            FacilityId = 8,
                            IsAvailable = false,
                            Name = "Pre-emptive radical project"
                        },
                        new
                        {
                            Id = 37,
                            Capacity = 163,
                            Description = "Autem nam praesentium quaerat ut quia molestiae corrupti ut ut.",
                            FacilityId = 8,
                            IsAvailable = false,
                            Name = "Self-enabling regional functionalities"
                        },
                        new
                        {
                            Id = 38,
                            Capacity = 151,
                            Description = "Non soluta provident.",
                            FacilityId = 8,
                            IsAvailable = true,
                            Name = "Customizable multi-state adapter"
                        },
                        new
                        {
                            Id = 39,
                            Capacity = 134,
                            Description = "Dolore debitis recusandae ipsum veniam earum.",
                            FacilityId = 8,
                            IsAvailable = false,
                            Name = "Decentralized executive standardization"
                        },
                        new
                        {
                            Id = 40,
                            Capacity = 175,
                            Description = "Rerum delectus maxime.",
                            FacilityId = 8,
                            IsAvailable = false,
                            Name = "Exclusive composite frame"
                        },
                        new
                        {
                            Id = 41,
                            Capacity = 154,
                            Description = "Incidunt consectetur voluptatem velit ea molestias qui quasi quas nihil.",
                            FacilityId = 9,
                            IsAvailable = true,
                            Name = "Cross-platform global alliance"
                        },
                        new
                        {
                            Id = 42,
                            Capacity = 194,
                            Description = "Cupiditate cumque rerum quod ea.",
                            FacilityId = 9,
                            IsAvailable = true,
                            Name = "Centralized dynamic process improvement"
                        },
                        new
                        {
                            Id = 43,
                            Capacity = 156,
                            Description = "Exercitationem doloribus assumenda.",
                            FacilityId = 9,
                            IsAvailable = true,
                            Name = "Centralized tertiary capability"
                        },
                        new
                        {
                            Id = 44,
                            Capacity = 143,
                            Description = "Est temporibus necessitatibus qui dolor iure eius consequatur.",
                            FacilityId = 9,
                            IsAvailable = true,
                            Name = "Compatible executive productivity"
                        },
                        new
                        {
                            Id = 45,
                            Capacity = 168,
                            Description = "Porro eos quod eum.",
                            FacilityId = 9,
                            IsAvailable = true,
                            Name = "Horizontal composite task-force"
                        },
                        new
                        {
                            Id = 46,
                            Capacity = 160,
                            Description = "Officia beatae molestiae reprehenderit.",
                            FacilityId = 10,
                            IsAvailable = true,
                            Name = "Networked dynamic toolset"
                        },
                        new
                        {
                            Id = 47,
                            Capacity = 103,
                            Description = "Eum magnam ullam quia nihil beatae sit.",
                            FacilityId = 10,
                            IsAvailable = false,
                            Name = "Decentralized heuristic solution"
                        },
                        new
                        {
                            Id = 48,
                            Capacity = 171,
                            Description = "Provident laudantium a debitis id fugiat omnis laudantium.",
                            FacilityId = 10,
                            IsAvailable = true,
                            Name = "Managed multi-tasking analyzer"
                        },
                        new
                        {
                            Id = 49,
                            Capacity = 136,
                            Description = "Harum corporis ut voluptas.",
                            FacilityId = 10,
                            IsAvailable = true,
                            Name = "Progressive clear-thinking secured line"
                        },
                        new
                        {
                            Id = 50,
                            Capacity = 141,
                            Description = "Quam ipsa unde esse nesciunt.",
                            FacilityId = 10,
                            IsAvailable = false,
                            Name = "Cross-group composite ability"
                        });
                });

            modelBuilder.Entity("ECMS.Models.AreaEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("EventId");

                    b.ToTable("area_events");
                });

            modelBuilder.Entity("ECMS.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Sapiente rerum non consequuntur blanditiis consequatur sint voluptatem.",
                            EmployeeCount = 37,
                            Name = "Music & Kids"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Ut voluptates distinctio aliquam in.",
                            EmployeeCount = 38,
                            Name = "Health"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Nihil est exercitationem.",
                            EmployeeCount = 41,
                            Name = "Baby, Jewelery & Industrial"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Maiores aliquam et.",
                            EmployeeCount = 19,
                            Name = "Industrial, Baby & Garden"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Doloremque modi doloribus aut similique aspernatur.",
                            EmployeeCount = 30,
                            Name = "Games & Grocery"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Dolorem ducimus qui.",
                            EmployeeCount = 28,
                            Name = "Electronics, Garden & Sports"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Corrupti eum consequatur.",
                            EmployeeCount = 7,
                            Name = "Home & Clothing"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Dolorem hic mollitia dolorum sint non omnis architecto velit consequatur.",
                            EmployeeCount = 31,
                            Name = "Jewelery"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Quo quo at dolore officia nulla error eaque repellendus.",
                            EmployeeCount = 32,
                            Name = "Garden"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Cupiditate fugit voluptatibus id est tenetur laborum.",
                            EmployeeCount = 43,
                            Name = "Kids"
                        });
                });

            modelBuilder.Entity("ECMS.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrentAttendees")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventCategory")
                        .HasColumnType("int");

                    b.Property<int>("MaxAttendees")
                        .HasColumnType("int");

                    b.Property<decimal>("RegularPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("VipPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.ToTable("events");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CurrentAttendees = 30,
                            Description = "Voluptatem molestiae cum voluptates eius amet. Fuga est ex culpa dolor culpa sint dolorem. Cum assumenda vero laudantium earum ut iste consectetur nemo. Nobis consequatur repellat aliquam temporibus inventore et occaecati facilis est. Autem natus quis est",
                            EndTime = new DateTime(2024, 10, 22, 8, 27, 28, 856, DateTimeKind.Local).AddTicks(9960),
                            EventCategory = 5,
                            MaxAttendees = 113,
                            RegularPrice = 137.488946920422670m,
                            StartTime = new DateTime(2024, 10, 22, 7, 12, 8, 884, DateTimeKind.Local).AddTicks(2187),
                            Title = "Libero ex animi iure aut eaque id a et sed.",
                            VipPrice = 206.2334203806340050m
                        },
                        new
                        {
                            Id = -2,
                            CurrentAttendees = 15,
                            Description = "Distinctio ipsum repellendus commodi sed pariatur iusto cupiditate veritatis sapiente. Quas eos eum maiores reiciendis quia non. Molestiae ad dolorum expedita atque qui quia quidem id. Officiis id non consequuntur fugiat.",
                            EndTime = new DateTime(2024, 6, 19, 23, 59, 50, 567, DateTimeKind.Local).AddTicks(5303),
                            EventCategory = 5,
                            MaxAttendees = 99,
                            RegularPrice = 630.838496502401320m,
                            StartTime = new DateTime(2024, 6, 19, 20, 49, 49, 540, DateTimeKind.Local).AddTicks(393),
                            Title = "Molestiae quia et qui illo deserunt.",
                            VipPrice = 946.2577447536019800m
                        },
                        new
                        {
                            Id = -3,
                            CurrentAttendees = 7,
                            Description = "Ut sequi illum provident cupiditate iste neque. Autem autem cupiditate. Maiores consequatur sed accusamus.",
                            EndTime = new DateTime(2024, 12, 9, 19, 41, 28, 165, DateTimeKind.Local).AddTicks(3148),
                            EventCategory = 4,
                            MaxAttendees = 193,
                            RegularPrice = 888.022802337830380m,
                            StartTime = new DateTime(2024, 12, 9, 18, 7, 47, 271, DateTimeKind.Local).AddTicks(9689),
                            Title = "Id itaque quas aut odio vel itaque autem nulla.",
                            VipPrice = 1332.0342035067455700m
                        },
                        new
                        {
                            Id = -4,
                            CurrentAttendees = 36,
                            Description = "Et sed porro. Culpa nobis amet laborum deserunt voluptates. Vero et provident et repudiandae enim cupiditate odit dignissimos.",
                            EndTime = new DateTime(2024, 9, 14, 17, 37, 19, 43, DateTimeKind.Local).AddTicks(3576),
                            EventCategory = 3,
                            MaxAttendees = 162,
                            RegularPrice = 810.240644317912930m,
                            StartTime = new DateTime(2024, 9, 14, 14, 44, 54, 916, DateTimeKind.Local).AddTicks(4547),
                            Title = "Eaque quo fugiat qui exercitationem harum.",
                            VipPrice = 1215.3609664768693950m
                        },
                        new
                        {
                            Id = -5,
                            CurrentAttendees = 29,
                            Description = "Laboriosam qui enim et est sapiente iste ea eius. Et facere nobis. Consequatur consequatur et. Dolor pariatur illo ut. Dolorum aut dolores cupiditate repudiandae voluptatem qui perspiciatis qui error.",
                            EndTime = new DateTime(2024, 12, 26, 5, 27, 36, 133, DateTimeKind.Local).AddTicks(348),
                            EventCategory = 2,
                            MaxAttendees = 122,
                            RegularPrice = 43.0239279683492740m,
                            StartTime = new DateTime(2024, 12, 26, 3, 32, 7, 211, DateTimeKind.Local).AddTicks(2793),
                            Title = "Incidunt et blanditiis.",
                            VipPrice = 64.53589195252391100m
                        },
                        new
                        {
                            Id = -6,
                            CurrentAttendees = 33,
                            Description = "Aliquid rerum nulla qui sed quos vel. Quia magnam a nulla. Fuga minus nostrum illum eius et eos omnis earum labore. Quo voluptatem ut magni qui in.",
                            EndTime = new DateTime(2024, 9, 23, 15, 12, 31, 994, DateTimeKind.Local).AddTicks(5915),
                            EventCategory = 6,
                            MaxAttendees = 175,
                            RegularPrice = 114.745938197385430m,
                            StartTime = new DateTime(2024, 9, 23, 11, 41, 58, 684, DateTimeKind.Local).AddTicks(7623),
                            Title = "Vitae fuga eligendi et cupiditate sed dolorum delectus nisi.",
                            VipPrice = 172.1189072960781450m
                        },
                        new
                        {
                            Id = -7,
                            CurrentAttendees = 9,
                            Description = "Alias deserunt tenetur eligendi voluptatum ut magnam aut laborum recusandae. Sed molestiae necessitatibus ipsum repudiandae molestiae minima ad maxime. Quia unde harum. Dolores perferendis vitae accusamus voluptate veniam est exercitationem omnis. Deserun",
                            EndTime = new DateTime(2025, 6, 5, 9, 37, 14, 821, DateTimeKind.Local).AddTicks(3856),
                            EventCategory = 6,
                            MaxAttendees = 162,
                            RegularPrice = 739.55760162807610m,
                            StartTime = new DateTime(2025, 6, 5, 6, 18, 59, 450, DateTimeKind.Local).AddTicks(9087),
                            Title = "Dolor ut voluptas ratione eligendi exercitationem quidem necessitatibus quia qui.",
                            VipPrice = 1109.336402442114150m
                        },
                        new
                        {
                            Id = -8,
                            CurrentAttendees = 43,
                            Description = "Magni molestias sed sed ipsam. Repudiandae et nihil sapiente distinctio omnis molestiae dolores. Quia minus quo sapiente. Eos ipsam autem vero. Sapiente quis sit excepturi nesciunt.",
                            EndTime = new DateTime(2024, 10, 17, 8, 14, 39, 945, DateTimeKind.Local).AddTicks(4960),
                            EventCategory = 4,
                            MaxAttendees = 65,
                            RegularPrice = 489.116767845314170m,
                            StartTime = new DateTime(2024, 10, 17, 6, 11, 56, 67, DateTimeKind.Local).AddTicks(5812),
                            Title = "Qui quia sed nesciunt possimus nisi eos est possimus.",
                            VipPrice = 733.6751517679712550m
                        },
                        new
                        {
                            Id = -9,
                            CurrentAttendees = 25,
                            Description = "Voluptatem corrupti ab magni aperiam delectus eum mollitia dolorem. Ipsum impedit ducimus et nobis porro nihil est. Qui aut vero quod voluptatum impedit et. Sint similique illum cupiditate. Sit quod quia illum voluptas harum neque ratione quo aliquid. Id ",
                            EndTime = new DateTime(2025, 4, 13, 19, 31, 34, 816, DateTimeKind.Local).AddTicks(3531),
                            EventCategory = 1,
                            MaxAttendees = 101,
                            RegularPrice = 313.820723203434910m,
                            StartTime = new DateTime(2025, 4, 13, 17, 47, 9, 217, DateTimeKind.Local).AddTicks(485),
                            Title = "Alias et non ducimus numquam dolorem expedita veniam quia impedit.",
                            VipPrice = 470.7310848051523650m
                        },
                        new
                        {
                            Id = -10,
                            CurrentAttendees = 43,
                            Description = "Dicta sed voluptatem ipsa porro qui. Optio labore repudiandae sunt minima et quia deserunt voluptatem enim. Harum distinctio velit voluptas libero sit expedita ut.",
                            EndTime = new DateTime(2024, 11, 26, 21, 5, 27, 785, DateTimeKind.Local).AddTicks(7855),
                            EventCategory = 4,
                            MaxAttendees = 168,
                            RegularPrice = 349.77565639001710m,
                            StartTime = new DateTime(2024, 11, 26, 17, 50, 23, 962, DateTimeKind.Local).AddTicks(7796),
                            Title = "Sunt fugit nisi doloribus.",
                            VipPrice = 524.663484585025650m
                        },
                        new
                        {
                            Id = -11,
                            CurrentAttendees = 37,
                            Description = "Odio molestiae libero cumque eaque recusandae voluptas voluptates rem voluptatem. Quo velit laboriosam natus cum sed impedit aut aspernatur. Nam dolorem officiis itaque inventore sunt repellat. Veniam eligendi sint distinctio quasi repudiandae dicta.",
                            EndTime = new DateTime(2025, 3, 12, 3, 15, 51, 27, DateTimeKind.Local).AddTicks(4145),
                            EventCategory = 2,
                            MaxAttendees = 89,
                            RegularPrice = 226.70489927177740m,
                            StartTime = new DateTime(2025, 3, 11, 23, 55, 54, 28, DateTimeKind.Local).AddTicks(9057),
                            Title = "Est provident perferendis distinctio quisquam.",
                            VipPrice = 340.057348907666100m
                        },
                        new
                        {
                            Id = -12,
                            CurrentAttendees = 42,
                            Description = "Nesciunt pariatur voluptatibus quaerat illum qui. Ut qui ut vitae quod vero ex. Voluptate neque sed voluptatem.",
                            EndTime = new DateTime(2025, 3, 7, 3, 6, 29, 381, DateTimeKind.Local).AddTicks(5413),
                            EventCategory = 1,
                            MaxAttendees = 195,
                            RegularPrice = 210.782812219752070m,
                            StartTime = new DateTime(2025, 3, 6, 23, 27, 4, 384, DateTimeKind.Local).AddTicks(3770),
                            Title = "Hic tempora fugit id explicabo magnam nihil.",
                            VipPrice = 316.1742183296281050m
                        },
                        new
                        {
                            Id = -13,
                            CurrentAttendees = 8,
                            Description = "Explicabo expedita dolores aperiam voluptatem. Eius et qui. Tempore quisquam corrupti unde non et eius. Ab quaerat incidunt occaecati et est adipisci molestias sapiente sequi. Distinctio minima asperiores totam ratione voluptas est blanditiis.",
                            EndTime = new DateTime(2024, 8, 4, 12, 15, 11, 355, DateTimeKind.Local).AddTicks(7873),
                            EventCategory = 1,
                            MaxAttendees = 174,
                            RegularPrice = 83.3528420515005940m,
                            StartTime = new DateTime(2024, 8, 4, 8, 34, 10, 454, DateTimeKind.Local).AddTicks(1296),
                            Title = "Dolorum fuga beatae dolores itaque voluptas eum minus.",
                            VipPrice = 125.02926307725089100m
                        },
                        new
                        {
                            Id = -14,
                            CurrentAttendees = 25,
                            Description = "Sunt et et temporibus nihil facilis. Illum et fugiat amet aut porro sed. Voluptatem voluptatem reiciendis nam sapiente minus temporibus dolore.",
                            EndTime = new DateTime(2024, 10, 1, 14, 55, 27, 200, DateTimeKind.Local).AddTicks(4708),
                            EventCategory = 1,
                            MaxAttendees = 133,
                            RegularPrice = 303.441741704010790m,
                            StartTime = new DateTime(2024, 10, 1, 12, 14, 24, 73, DateTimeKind.Local).AddTicks(3869),
                            Title = "Itaque officiis est quisquam nulla ea occaecati nihil.",
                            VipPrice = 455.1626125560161850m
                        },
                        new
                        {
                            Id = -15,
                            CurrentAttendees = 18,
                            Description = "Eaque quas eum laboriosam qui atque. Rerum qui expedita perferendis et aut impedit iste. Id non fugit. Provident numquam voluptatum laboriosam qui. Consequuntur iusto molestiae ab delectus. Vero quia illum sed tenetur laudantium mollitia.",
                            EndTime = new DateTime(2024, 7, 4, 10, 58, 21, 923, DateTimeKind.Local).AddTicks(1173),
                            EventCategory = 5,
                            MaxAttendees = 146,
                            RegularPrice = 22.6437920664805090m,
                            StartTime = new DateTime(2024, 7, 4, 9, 30, 11, 59, DateTimeKind.Local).AddTicks(528),
                            Title = "Deleniti qui consequatur sequi laborum laborum omnis nemo.",
                            VipPrice = 33.96568809972076350m
                        },
                        new
                        {
                            Id = -16,
                            CurrentAttendees = 27,
                            Description = "Quia doloribus unde id. Ipsum nostrum et praesentium nesciunt unde sunt aliquid. Voluptate quidem voluptatem odio eius alias ut similique dolore. Ratione qui autem ea totam maxime impedit culpa. Tempora aliquam non.",
                            EndTime = new DateTime(2024, 8, 3, 9, 41, 51, 10, DateTimeKind.Local).AddTicks(8684),
                            EventCategory = 1,
                            MaxAttendees = 63,
                            RegularPrice = 384.658341665953510m,
                            StartTime = new DateTime(2024, 8, 3, 8, 6, 52, 229, DateTimeKind.Local).AddTicks(4728),
                            Title = "Blanditiis sed perferendis.",
                            VipPrice = 576.9875124989302650m
                        },
                        new
                        {
                            Id = -17,
                            CurrentAttendees = 9,
                            Description = "Error explicabo reiciendis necessitatibus. Laborum natus placeat enim cum nihil nobis aspernatur. Quasi rerum molestiae in architecto ut sint. Non voluptatem rerum perferendis adipisci porro.",
                            EndTime = new DateTime(2024, 11, 24, 16, 52, 58, 554, DateTimeKind.Local).AddTicks(8828),
                            EventCategory = 6,
                            MaxAttendees = 113,
                            RegularPrice = 190.524176760540250m,
                            StartTime = new DateTime(2024, 11, 24, 13, 21, 42, 468, DateTimeKind.Local).AddTicks(995),
                            Title = "Itaque amet ea quidem et dignissimos.",
                            VipPrice = 285.7862651408103750m
                        },
                        new
                        {
                            Id = -18,
                            CurrentAttendees = 17,
                            Description = "Aliquid porro officiis nisi eligendi pariatur. Aut totam numquam et dignissimos tempore esse sint occaecati. Minus cumque perferendis quasi voluptatum. Officiis placeat et.",
                            EndTime = new DateTime(2024, 11, 22, 8, 16, 12, 762, DateTimeKind.Local).AddTicks(3126),
                            EventCategory = 3,
                            MaxAttendees = 113,
                            RegularPrice = 96.9033493553629690m,
                            StartTime = new DateTime(2024, 11, 22, 5, 57, 18, 697, DateTimeKind.Local).AddTicks(5119),
                            Title = "Ipsam laboriosam minus sunt sed libero sint vitae.",
                            VipPrice = 145.35502403304445350m
                        },
                        new
                        {
                            Id = -19,
                            CurrentAttendees = 40,
                            Description = "Modi et facilis at nemo officia et. Aperiam ea et voluptas dignissimos corrupti illum. Velit laudantium voluptatem iure omnis placeat ab architecto. Maxime atque reiciendis aut delectus voluptas expedita.",
                            EndTime = new DateTime(2024, 8, 9, 14, 36, 48, 249, DateTimeKind.Local).AddTicks(118),
                            EventCategory = 4,
                            MaxAttendees = 135,
                            RegularPrice = 433.489707847178830m,
                            StartTime = new DateTime(2024, 8, 9, 12, 3, 13, 606, DateTimeKind.Local).AddTicks(2267),
                            Title = "Sequi soluta aut dicta eos quia.",
                            VipPrice = 650.2345617707682450m
                        },
                        new
                        {
                            Id = -20,
                            CurrentAttendees = 28,
                            Description = "Voluptatem aspernatur dicta necessitatibus quas ullam debitis. Dolor ab dolor aut hic earum eaque mollitia nihil optio. Perferendis aliquam totam. Nostrum sapiente hic hic perferendis itaque est dolorem illo. Natus rerum at eos non omnis.",
                            EndTime = new DateTime(2025, 5, 4, 19, 0, 39, 892, DateTimeKind.Local).AddTicks(5613),
                            EventCategory = 5,
                            MaxAttendees = 144,
                            RegularPrice = 595.747584379924120m,
                            StartTime = new DateTime(2025, 5, 4, 17, 26, 28, 228, DateTimeKind.Local).AddTicks(1184),
                            Title = "Porro maiores nisi aut.",
                            VipPrice = 893.6213765698861800m
                        });
                });

            modelBuilder.Entity("ECMS.Models.EventCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EventId");

                    b.HasIndex("TicketId");

                    b.ToTable("event_customers");
                });

            modelBuilder.Entity("ECMS.Models.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("facilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            Capacity = 176,
                            Description = "Voluptatem voluptatem ratione earum sed sequi facilis accusantium sequi.",
                            Name = "Bayer, Bahringer and Waelchi"
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            Capacity = 303,
                            Description = "Est assumenda ducimus non veritatis.",
                            Name = "Murazik - Russel"
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 3,
                            Capacity = 421,
                            Description = "Rerum assumenda nihil quia ea velit aliquam.",
                            Name = "Boehm Group"
                        },
                        new
                        {
                            Id = 4,
                            AddressId = 4,
                            Capacity = 322,
                            Description = "Officia et tenetur architecto excepturi ut quasi iste commodi esse.",
                            Name = "Hudson - Padberg"
                        },
                        new
                        {
                            Id = 5,
                            AddressId = 5,
                            Capacity = 464,
                            Description = "Suscipit labore nihil eligendi consectetur rem officiis delectus praesentium recusandae.",
                            Name = "Thompson Inc"
                        },
                        new
                        {
                            Id = 6,
                            AddressId = 6,
                            Capacity = 150,
                            Description = "Quis possimus neque eos debitis maiores.",
                            Name = "Greenfelder - Mann"
                        },
                        new
                        {
                            Id = 7,
                            AddressId = 7,
                            Capacity = 473,
                            Description = "Possimus non exercitationem quia in repellat qui autem quia.",
                            Name = "Legros - MacGyver"
                        },
                        new
                        {
                            Id = 8,
                            AddressId = 8,
                            Capacity = 146,
                            Description = "Praesentium incidunt qui.",
                            Name = "Witting and Sons"
                        },
                        new
                        {
                            Id = 9,
                            AddressId = 9,
                            Capacity = 389,
                            Description = "In consequatur alias minima voluptatibus et velit.",
                            Name = "Haag LLC"
                        },
                        new
                        {
                            Id = 10,
                            AddressId = 10,
                            Capacity = 178,
                            Description = "Aut repudiandae aperiam et unde asperiores hic numquam sit.",
                            Name = "Hyatt, Cronin and Mitchell"
                        });
                });

            modelBuilder.Entity("ECMS.Models.FacilitySupplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("SupplierId");

                    b.ToTable("facility_suppliers");
                });

            modelBuilder.Entity("ECMS.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ECMS.Models.OrderProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("order_products");
                });

            modelBuilder.Entity("ECMS.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("persons");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ECMS.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("products");
                });

            modelBuilder.Entity("ECMS.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfGuests")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservationFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReservationTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("reservations");
                });

            modelBuilder.Entity("ECMS.Models.ReservationArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("ReservationId");

                    b.ToTable("reservation_areas");
                });

            modelBuilder.Entity("ECMS.Models.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("FromHour")
                        .HasColumnType("time");

                    b.Property<int>("ShiftType")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ToHour")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("shifts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FromHour = new TimeSpan(0, 6, 52, 0, 0),
                            ShiftType = 2,
                            ToHour = new TimeSpan(0, 15, 24, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            FromHour = new TimeSpan(0, 16, 24, 0, 0),
                            ShiftType = 1,
                            ToHour = new TimeSpan(0, 17, 19, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            FromHour = new TimeSpan(0, 4, 41, 0, 0),
                            ShiftType = 2,
                            ToHour = new TimeSpan(0, 20, 57, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            FromHour = new TimeSpan(0, 0, 53, 0, 0),
                            ShiftType = 2,
                            ToHour = new TimeSpan(0, 7, 54, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            FromHour = new TimeSpan(0, 6, 6, 0, 0),
                            ShiftType = 3,
                            ToHour = new TimeSpan(0, 22, 27, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            FromHour = new TimeSpan(0, 19, 6, 0, 0),
                            ShiftType = 1,
                            ToHour = new TimeSpan(0, 17, 26, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            FromHour = new TimeSpan(0, 3, 29, 0, 0),
                            ShiftType = 1,
                            ToHour = new TimeSpan(0, 0, 34, 0, 0)
                        },
                        new
                        {
                            Id = 8,
                            FromHour = new TimeSpan(0, 10, 10, 0, 0),
                            ShiftType = 2,
                            ToHour = new TimeSpan(0, 11, 35, 0, 0)
                        },
                        new
                        {
                            Id = 9,
                            FromHour = new TimeSpan(0, 10, 49, 0, 0),
                            ShiftType = 1,
                            ToHour = new TimeSpan(0, 16, 14, 0, 0)
                        },
                        new
                        {
                            Id = 10,
                            FromHour = new TimeSpan(0, 18, 14, 0, 0),
                            ShiftType = 2,
                            ToHour = new TimeSpan(0, 8, 27, 0, 0)
                        });
                });

            modelBuilder.Entity("ECMS.Models.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("suppliers");
                });

            modelBuilder.Entity("ECMS.Models.SupplierProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId");

                    b.ToTable("supplier_products");
                });

            modelBuilder.Entity("ECMS.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsSeated")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SeatNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("tickets");
                });

            modelBuilder.Entity("ECMS.Models.Customer", b =>
                {
                    b.HasBaseType("ECMS.Models.Person");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastVisit")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasIndex("PersonId")
                        .IsUnique()
                        .HasFilter("[PersonId] IS NOT NULL");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("ECMS.Models.Employee", b =>
                {
                    b.HasBaseType("ECMS.Models.Person");

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("HireDate")
                        .HasColumnType("date");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ShiftId")
                        .HasColumnType("int");

                    b.Property<int?>("SupervisorId")
                        .HasColumnType("int");

                    b.HasIndex("AreaId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PersonId")
                        .IsUnique()
                        .HasFilter("[PersonId] IS NOT NULL");

                    b.HasIndex("ShiftId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("ECMS.Models.Area", b =>
                {
                    b.HasOne("ECMS.Models.Facility", "Facility")
                        .WithMany("Areas")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("ECMS.Models.AreaEvent", b =>
                {
                    b.HasOne("ECMS.Models.Area", "Area")
                        .WithMany("AreaEvents")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Event", "Event")
                        .WithMany("AreaEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ECMS.Models.EventCustomer", b =>
                {
                    b.HasOne("ECMS.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Event", "Event")
                        .WithMany("EventCustomers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Ticket", "Ticket")
                        .WithMany("EventCustomers")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Event");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("ECMS.Models.Facility", b =>
                {
                    b.HasOne("ECMS.Models.Address", "Address")
                        .WithMany("Facilities")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("ECMS.Models.FacilitySupplier", b =>
                {
                    b.HasOne("ECMS.Models.Facility", "Facility")
                        .WithMany("FacilitySuppliers")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Supplier", "Supplier")
                        .WithMany("FacilitySuppliers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("ECMS.Models.Order", b =>
                {
                    b.HasOne("ECMS.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ECMS.Models.OrderProduct", b =>
                {
                    b.HasOne("ECMS.Models.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECMS.Models.Reservation", b =>
                {
                    b.HasOne("ECMS.Models.Customer", null)
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("ECMS.Models.ReservationArea", b =>
                {
                    b.HasOne("ECMS.Models.Area", "Area")
                        .WithMany("ReservationAreas")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Reservation", "Reservation")
                        .WithMany("ReservationAreas")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("ECMS.Models.Supplier", b =>
                {
                    b.HasOne("ECMS.Models.Address", "Address")
                        .WithMany("Suppliers")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("ECMS.Models.SupplierProduct", b =>
                {
                    b.HasOne("ECMS.Models.Product", "Product")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Supplier", "Supplier")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("ECMS.Models.Customer", b =>
                {
                    b.HasOne("ECMS.Models.Person", null)
                        .WithOne()
                        .HasForeignKey("ECMS.Models.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Person", "Person")
                        .WithOne("Customer")
                        .HasForeignKey("ECMS.Models.Customer", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ECMS.Models.Employee", b =>
                {
                    b.HasOne("ECMS.Models.Area", "Area")
                        .WithMany("Employees")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("ECMS.Models.Person", null)
                        .WithOne()
                        .HasForeignKey("ECMS.Models.Employee", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Person", "Person")
                        .WithOne("Employee")
                        .HasForeignKey("ECMS.Models.Employee", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Shift", "Shift")
                        .WithMany("Employees")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Employee", "Supervisor")
                        .WithMany()
                        .HasForeignKey("SupervisorId");

                    b.Navigation("Area");

                    b.Navigation("Department");

                    b.Navigation("Person");

                    b.Navigation("Shift");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("ECMS.Models.Address", b =>
                {
                    b.Navigation("Facilities");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("ECMS.Models.Area", b =>
                {
                    b.Navigation("AreaEvents");

                    b.Navigation("Employees");

                    b.Navigation("ReservationAreas");
                });

            modelBuilder.Entity("ECMS.Models.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ECMS.Models.Event", b =>
                {
                    b.Navigation("AreaEvents");

                    b.Navigation("EventCustomers");
                });

            modelBuilder.Entity("ECMS.Models.Facility", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("FacilitySuppliers");
                });

            modelBuilder.Entity("ECMS.Models.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("ECMS.Models.Person", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("Employee")
                        .IsRequired();
                });

            modelBuilder.Entity("ECMS.Models.Product", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("SupplierProducts");
                });

            modelBuilder.Entity("ECMS.Models.Reservation", b =>
                {
                    b.Navigation("ReservationAreas");
                });

            modelBuilder.Entity("ECMS.Models.Shift", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ECMS.Models.Supplier", b =>
                {
                    b.Navigation("FacilitySuppliers");

                    b.Navigation("SupplierProducts");
                });

            modelBuilder.Entity("ECMS.Models.Ticket", b =>
                {
                    b.Navigation("EventCustomers");
                });

            modelBuilder.Entity("ECMS.Models.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
