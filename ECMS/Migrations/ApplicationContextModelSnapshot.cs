// <auto-generated />
using System;
using ECMS.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECMS.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.4.24267.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ECMS.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BuildingNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BuildingNo = "0506",
                            City = "Kutchmouth",
                            Street = "Wyman Camp"
                        },
                        new
                        {
                            Id = 2,
                            BuildingNo = "64951",
                            City = "North Clementineborough",
                            Street = "Dickinson Summit"
                        },
                        new
                        {
                            Id = 3,
                            BuildingNo = "49793",
                            City = "Eraland",
                            Street = "Prosacco Common"
                        },
                        new
                        {
                            Id = 4,
                            BuildingNo = "27379",
                            City = "Lake Lula",
                            Street = "Payton Burg"
                        },
                        new
                        {
                            Id = 5,
                            BuildingNo = "2239",
                            City = "North Edmondmouth",
                            Street = "Name Plain"
                        },
                        new
                        {
                            Id = 6,
                            BuildingNo = "568",
                            City = "Malachishire",
                            Street = "Karli Road"
                        },
                        new
                        {
                            Id = 7,
                            BuildingNo = "4487",
                            City = "Hildahaven",
                            Street = "Mary Divide"
                        },
                        new
                        {
                            Id = 8,
                            BuildingNo = "22183",
                            City = "Port Jaidenfort",
                            Street = "Jacobs Alley"
                        },
                        new
                        {
                            Id = 9,
                            BuildingNo = "389",
                            City = "Treutelburgh",
                            Street = "Jessika Court"
                        },
                        new
                        {
                            Id = 10,
                            BuildingNo = "177",
                            City = "New Gerardo",
                            Street = "Schiller Unions"
                        });
                });

            modelBuilder.Entity("ECMS.Models.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.ToTable("areas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 125,
                            Description = "Rerum recusandae provident libero nemo optio quam labore labore.",
                            FacilityId = 1,
                            IsAvailable = true,
                            Name = "Open-source responsive website"
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 174,
                            Description = "Omnis architecto non autem voluptatem nulla.",
                            FacilityId = 1,
                            IsAvailable = true,
                            Name = "Mandatory demand-driven encoding"
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 177,
                            Description = "Voluptatem impedit et perspiciatis distinctio ad voluptas voluptatem.",
                            FacilityId = 1,
                            IsAvailable = false,
                            Name = "Realigned fresh-thinking parallelism"
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 78,
                            Description = "Sed quas occaecati in mollitia qui.",
                            FacilityId = 1,
                            IsAvailable = true,
                            Name = "Synergized bifurcated interface"
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 59,
                            Description = "Molestiae laudantium est.",
                            FacilityId = 1,
                            IsAvailable = false,
                            Name = "Upgradable client-server structure"
                        },
                        new
                        {
                            Id = 6,
                            Capacity = 89,
                            Description = "Dolor maiores perferendis beatae quia dolorum qui.",
                            FacilityId = 2,
                            IsAvailable = true,
                            Name = "Cloned 5th generation concept"
                        },
                        new
                        {
                            Id = 7,
                            Capacity = 176,
                            Description = "Rerum quaerat quibusdam ex suscipit in labore aspernatur quis.",
                            FacilityId = 2,
                            IsAvailable = true,
                            Name = "Re-contextualized fresh-thinking superstructure"
                        },
                        new
                        {
                            Id = 8,
                            Capacity = 153,
                            Description = "Quia voluptatem et ex facilis qui assumenda.",
                            FacilityId = 2,
                            IsAvailable = false,
                            Name = "Ameliorated object-oriented strategy"
                        },
                        new
                        {
                            Id = 9,
                            Capacity = 120,
                            Description = "Beatae illum modi reiciendis voluptate accusantium optio.",
                            FacilityId = 2,
                            IsAvailable = false,
                            Name = "Synergized optimal open system"
                        },
                        new
                        {
                            Id = 10,
                            Capacity = 86,
                            Description = "Optio aperiam cupiditate quidem rerum quos.",
                            FacilityId = 2,
                            IsAvailable = true,
                            Name = "Multi-channelled well-modulated collaboration"
                        },
                        new
                        {
                            Id = 11,
                            Capacity = 52,
                            Description = "Maiores id fuga numquam unde aut blanditiis occaecati.",
                            FacilityId = 3,
                            IsAvailable = false,
                            Name = "Phased tangible knowledge base"
                        },
                        new
                        {
                            Id = 12,
                            Capacity = 160,
                            Description = "Beatae nostrum quis optio et suscipit.",
                            FacilityId = 3,
                            IsAvailable = false,
                            Name = "Innovative bifurcated archive"
                        },
                        new
                        {
                            Id = 13,
                            Capacity = 170,
                            Description = "Et voluptas aut.",
                            FacilityId = 3,
                            IsAvailable = false,
                            Name = "Exclusive 24 hour synergy"
                        },
                        new
                        {
                            Id = 14,
                            Capacity = 187,
                            Description = "Quo quam nihil.",
                            FacilityId = 3,
                            IsAvailable = true,
                            Name = "Ameliorated zero tolerance hub"
                        },
                        new
                        {
                            Id = 15,
                            Capacity = 114,
                            Description = "Id pariatur cupiditate voluptatem nihil quisquam ipsam.",
                            FacilityId = 3,
                            IsAvailable = false,
                            Name = "Fundamental system-worthy model"
                        },
                        new
                        {
                            Id = 16,
                            Capacity = 160,
                            Description = "Illum ipsa quibusdam at nesciunt enim et et.",
                            FacilityId = 4,
                            IsAvailable = true,
                            Name = "Exclusive logistical model"
                        },
                        new
                        {
                            Id = 17,
                            Capacity = 77,
                            Description = "Vel veritatis odit reprehenderit et autem dolores.",
                            FacilityId = 4,
                            IsAvailable = false,
                            Name = "Triple-buffered disintermediate alliance"
                        },
                        new
                        {
                            Id = 18,
                            Capacity = 174,
                            Description = "Qui excepturi perferendis aut ut.",
                            FacilityId = 4,
                            IsAvailable = true,
                            Name = "Synchronised real-time infrastructure"
                        },
                        new
                        {
                            Id = 19,
                            Capacity = 99,
                            Description = "Autem aut velit quos reprehenderit.",
                            FacilityId = 4,
                            IsAvailable = true,
                            Name = "Ameliorated asymmetric conglomeration"
                        },
                        new
                        {
                            Id = 20,
                            Capacity = 87,
                            Description = "Voluptates deserunt dolor qui.",
                            FacilityId = 4,
                            IsAvailable = true,
                            Name = "Cloned local architecture"
                        },
                        new
                        {
                            Id = 21,
                            Capacity = 155,
                            Description = "Quos tenetur aut minima et vel unde qui rem.",
                            FacilityId = 5,
                            IsAvailable = false,
                            Name = "Expanded methodical approach"
                        },
                        new
                        {
                            Id = 22,
                            Capacity = 134,
                            Description = "Necessitatibus ut qui.",
                            FacilityId = 5,
                            IsAvailable = true,
                            Name = "Expanded bottom-line emulation"
                        },
                        new
                        {
                            Id = 23,
                            Capacity = 149,
                            Description = "Ratione dolores consectetur amet ut corporis in molestiae quo necessitatibus.",
                            FacilityId = 5,
                            IsAvailable = true,
                            Name = "Down-sized reciprocal methodology"
                        },
                        new
                        {
                            Id = 24,
                            Capacity = 165,
                            Description = "Et accusamus ipsa culpa corporis non molestiae.",
                            FacilityId = 5,
                            IsAvailable = false,
                            Name = "Secured static encoding"
                        },
                        new
                        {
                            Id = 25,
                            Capacity = 196,
                            Description = "Nostrum id ea placeat eum eius.",
                            FacilityId = 5,
                            IsAvailable = false,
                            Name = "Upgradable dynamic leverage"
                        },
                        new
                        {
                            Id = 26,
                            Capacity = 181,
                            Description = "Dicta consequuntur pariatur debitis sed.",
                            FacilityId = 6,
                            IsAvailable = false,
                            Name = "Expanded reciprocal migration"
                        },
                        new
                        {
                            Id = 27,
                            Capacity = 61,
                            Description = "Aliquam fugiat et consequatur reprehenderit.",
                            FacilityId = 6,
                            IsAvailable = true,
                            Name = "Enterprise-wide maximized matrices"
                        },
                        new
                        {
                            Id = 28,
                            Capacity = 156,
                            Description = "Voluptatum veritatis qui odit fuga.",
                            FacilityId = 6,
                            IsAvailable = false,
                            Name = "Enterprise-wide even-keeled budgetary management"
                        },
                        new
                        {
                            Id = 29,
                            Capacity = 182,
                            Description = "Mollitia voluptatibus aut consequatur earum unde ab enim.",
                            FacilityId = 6,
                            IsAvailable = true,
                            Name = "Customer-focused logistical monitoring"
                        },
                        new
                        {
                            Id = 30,
                            Capacity = 178,
                            Description = "Ipsam numquam sapiente placeat ut consequatur voluptatem earum aut alias.",
                            FacilityId = 6,
                            IsAvailable = true,
                            Name = "Horizontal modular installation"
                        },
                        new
                        {
                            Id = 31,
                            Capacity = 189,
                            Description = "Temporibus libero ipsum ratione fugiat nisi.",
                            FacilityId = 7,
                            IsAvailable = false,
                            Name = "Secured national emulation"
                        },
                        new
                        {
                            Id = 32,
                            Capacity = 168,
                            Description = "Earum qui qui et aut cupiditate.",
                            FacilityId = 7,
                            IsAvailable = true,
                            Name = "Progressive bottom-line implementation"
                        },
                        new
                        {
                            Id = 33,
                            Capacity = 54,
                            Description = "Velit ea quia.",
                            FacilityId = 7,
                            IsAvailable = false,
                            Name = "Re-engineered logistical solution"
                        },
                        new
                        {
                            Id = 34,
                            Capacity = 139,
                            Description = "In molestiae vel debitis cupiditate est facere vero modi error.",
                            FacilityId = 7,
                            IsAvailable = true,
                            Name = "Organic systematic customer loyalty"
                        },
                        new
                        {
                            Id = 35,
                            Capacity = 104,
                            Description = "Magnam facilis consequuntur aut provident dolorum deleniti.",
                            FacilityId = 7,
                            IsAvailable = true,
                            Name = "Diverse zero defect hierarchy"
                        },
                        new
                        {
                            Id = 36,
                            Capacity = 62,
                            Description = "Quis praesentium sint.",
                            FacilityId = 8,
                            IsAvailable = true,
                            Name = "Reduced motivating complexity"
                        },
                        new
                        {
                            Id = 37,
                            Capacity = 139,
                            Description = "Adipisci quo labore.",
                            FacilityId = 8,
                            IsAvailable = false,
                            Name = "Adaptive impactful firmware"
                        },
                        new
                        {
                            Id = 38,
                            Capacity = 152,
                            Description = "Labore distinctio voluptatem non quo tempora ad.",
                            FacilityId = 8,
                            IsAvailable = true,
                            Name = "Switchable modular product"
                        },
                        new
                        {
                            Id = 39,
                            Capacity = 80,
                            Description = "Iure iusto quo aut.",
                            FacilityId = 8,
                            IsAvailable = true,
                            Name = "Inverse radical interface"
                        },
                        new
                        {
                            Id = 40,
                            Capacity = 194,
                            Description = "Perspiciatis soluta dignissimos commodi est debitis.",
                            FacilityId = 8,
                            IsAvailable = false,
                            Name = "Secured client-server internet solution"
                        },
                        new
                        {
                            Id = 41,
                            Capacity = 89,
                            Description = "Aut reiciendis numquam necessitatibus perferendis mollitia eos modi nostrum.",
                            FacilityId = 9,
                            IsAvailable = false,
                            Name = "Managed logistical firmware"
                        },
                        new
                        {
                            Id = 42,
                            Capacity = 155,
                            Description = "Dolor quidem voluptatem corrupti.",
                            FacilityId = 9,
                            IsAvailable = false,
                            Name = "Balanced context-sensitive data-warehouse"
                        },
                        new
                        {
                            Id = 43,
                            Capacity = 98,
                            Description = "Eum tempora modi voluptatem.",
                            FacilityId = 9,
                            IsAvailable = true,
                            Name = "Focused user-facing database"
                        },
                        new
                        {
                            Id = 44,
                            Capacity = 94,
                            Description = "Ad illum quam sit aut quas voluptatem dicta.",
                            FacilityId = 9,
                            IsAvailable = false,
                            Name = "Open-architected regional initiative"
                        },
                        new
                        {
                            Id = 45,
                            Capacity = 157,
                            Description = "Atque hic sint rerum cupiditate distinctio.",
                            FacilityId = 9,
                            IsAvailable = false,
                            Name = "Up-sized clear-thinking throughput"
                        },
                        new
                        {
                            Id = 46,
                            Capacity = 152,
                            Description = "Qui dignissimos dignissimos molestiae tempora sunt quo et.",
                            FacilityId = 10,
                            IsAvailable = false,
                            Name = "Decentralized radical local area network"
                        },
                        new
                        {
                            Id = 47,
                            Capacity = 175,
                            Description = "Adipisci error tenetur vel accusantium at itaque.",
                            FacilityId = 10,
                            IsAvailable = true,
                            Name = "User-centric disintermediate database"
                        },
                        new
                        {
                            Id = 48,
                            Capacity = 152,
                            Description = "Expedita rem nobis omnis provident est odit.",
                            FacilityId = 10,
                            IsAvailable = false,
                            Name = "User-friendly coherent Graphic Interface"
                        },
                        new
                        {
                            Id = 49,
                            Capacity = 86,
                            Description = "Repellat at dolor.",
                            FacilityId = 10,
                            IsAvailable = true,
                            Name = "Enhanced client-driven groupware"
                        },
                        new
                        {
                            Id = 50,
                            Capacity = 79,
                            Description = "Suscipit ea sit qui esse perspiciatis.",
                            FacilityId = 10,
                            IsAvailable = false,
                            Name = "Function-based methodical time-frame"
                        });
                });

            modelBuilder.Entity("ECMS.Models.AreaEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("EventId");

                    b.ToTable("area_events");
                });

            modelBuilder.Entity("ECMS.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastVisit")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("customers");
                });

            modelBuilder.Entity("ECMS.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Quis exercitationem maxime quam magnam facere.",
                            EmployeeCount = 15,
                            Name = "Home"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Totam quis distinctio repellendus dignissimos officiis deleniti sed eos.",
                            EmployeeCount = 28,
                            Name = "Sports & Beauty"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Quis quod qui corporis.",
                            EmployeeCount = 50,
                            Name = "Games"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Laboriosam quod quisquam omnis tenetur beatae qui ipsa qui eos.",
                            EmployeeCount = 36,
                            Name = "Games"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Sed doloremque sit enim modi aut.",
                            EmployeeCount = 37,
                            Name = "Beauty, Electronics & Garden"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Ut fugit mollitia rerum eligendi est optio repellendus natus distinctio.",
                            EmployeeCount = 26,
                            Name = "Sports & Music"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Dolor sed velit quod aut at voluptas vitae minima.",
                            EmployeeCount = 17,
                            Name = "Jewelery, Electronics & Kids"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Quod cum quibusdam vitae natus fugiat in eligendi.",
                            EmployeeCount = 21,
                            Name = "Toys, Health & Jewelery"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Expedita qui dolorem omnis ut voluptas quia nobis vitae eos.",
                            EmployeeCount = 22,
                            Name = "Automotive"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Dolor minima itaque cupiditate rerum distinctio deleniti doloribus.",
                            EmployeeCount = 5,
                            Name = "Industrial & Kids"
                        });
                });

            modelBuilder.Entity("ECMS.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("HireDate")
                        .HasColumnType("date");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ShiftId")
                        .HasColumnType("int");

                    b.Property<int?>("SupervisorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.HasIndex("ShiftId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("ECMS.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrentAttendees")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventCategory")
                        .HasColumnType("int");

                    b.Property<int>("MaxAttendees")
                        .HasColumnType("int");

                    b.Property<decimal>("RegularPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("VipPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.ToTable("events");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            CurrentAttendees = 41,
                            Description = "Illo autem sit rem provident sunt porro et sed expedita. Voluptatem facere modi quae modi ullam veniam est aut. Quidem vel eaque tempora voluptatem voluptatem. Ut ab voluptas et et dolorem aut quia asperiores.",
                            EndTime = new DateTime(2024, 7, 13, 16, 13, 57, 240, DateTimeKind.Local).AddTicks(4758),
                            EventCategory = 1,
                            MaxAttendees = 129,
                            RegularPrice = 142.581476255770630m,
                            StartTime = new DateTime(2024, 7, 13, 12, 44, 5, 443, DateTimeKind.Local).AddTicks(3099),
                            Title = "Consequuntur quis eum nihil quis.",
                            VipPrice = 213.8722143836559450m
                        },
                        new
                        {
                            Id = -2,
                            CurrentAttendees = 40,
                            Description = "Ipsa illo consequatur sed voluptatem aliquam vel recusandae impedit. Rem qui aut ullam sed repudiandae doloremque fugiat autem placeat. Repudiandae dolor dolor itaque sit occaecati neque. Ullam nam ut voluptatem quasi reprehenderit et quia ducimus quia.",
                            EndTime = new DateTime(2025, 2, 21, 2, 34, 58, 41, DateTimeKind.Local).AddTicks(1447),
                            EventCategory = 5,
                            MaxAttendees = 136,
                            RegularPrice = 545.643409367642950m,
                            StartTime = new DateTime(2025, 2, 21, 0, 35, 51, 17, DateTimeKind.Local).AddTicks(4835),
                            Title = "Mollitia cupiditate inventore.",
                            VipPrice = 818.4651140514644250m
                        },
                        new
                        {
                            Id = -3,
                            CurrentAttendees = 43,
                            Description = "Iste ratione consequuntur tempore. Vel excepturi cumque ut. Aut omnis dolores omnis deleniti quae aut fuga mollitia.",
                            EndTime = new DateTime(2024, 6, 21, 8, 9, 50, 558, DateTimeKind.Local).AddTicks(4221),
                            EventCategory = 2,
                            MaxAttendees = 155,
                            RegularPrice = 583.378728727307140m,
                            StartTime = new DateTime(2024, 6, 21, 6, 32, 13, 423, DateTimeKind.Local).AddTicks(4671),
                            Title = "Dolores earum delectus.",
                            VipPrice = 875.0680930909607100m
                        },
                        new
                        {
                            Id = -4,
                            CurrentAttendees = 4,
                            Description = "Et doloribus ea quia qui autem error autem accusamus doloremque. Ut minus quas reiciendis deleniti consequatur. Deleniti modi dolorum.",
                            EndTime = new DateTime(2024, 10, 21, 18, 33, 27, 459, DateTimeKind.Local).AddTicks(2992),
                            EventCategory = 2,
                            MaxAttendees = 136,
                            RegularPrice = 572.197759967821780m,
                            StartTime = new DateTime(2024, 10, 21, 16, 21, 22, 962, DateTimeKind.Local).AddTicks(4731),
                            Title = "Ullam aut ipsam voluptatem.",
                            VipPrice = 858.2966399517326700m
                        },
                        new
                        {
                            Id = -5,
                            CurrentAttendees = 14,
                            Description = "Sit et reiciendis voluptatem reiciendis placeat voluptatem est. Delectus magni voluptas iusto maiores molestiae possimus et. Occaecati rerum odio voluptatem qui ad autem.",
                            EndTime = new DateTime(2025, 1, 20, 7, 3, 25, 747, DateTimeKind.Local).AddTicks(1718),
                            EventCategory = 3,
                            MaxAttendees = 188,
                            RegularPrice = 195.837598584716320m,
                            StartTime = new DateTime(2025, 1, 20, 5, 18, 26, 347, DateTimeKind.Local).AddTicks(5339),
                            Title = "Sunt blanditiis quam ullam id itaque autem et quaerat.",
                            VipPrice = 293.7563978770744800m
                        },
                        new
                        {
                            Id = -6,
                            CurrentAttendees = 30,
                            Description = "Corrupti velit maxime deserunt cupiditate rem illo. Exercitationem alias rem sit aut. Necessitatibus beatae sint doloremque.",
                            EndTime = new DateTime(2025, 6, 5, 3, 28, 48, 520, DateTimeKind.Local).AddTicks(8323),
                            EventCategory = 5,
                            MaxAttendees = 200,
                            RegularPrice = 175.049465619820870m,
                            StartTime = new DateTime(2025, 6, 5, 0, 4, 54, 742, DateTimeKind.Local).AddTicks(1415),
                            Title = "Dignissimos sit repellendus qui aspernatur aut pariatur quae.",
                            VipPrice = 262.5741984297313050m
                        },
                        new
                        {
                            Id = -7,
                            CurrentAttendees = 4,
                            Description = "Asperiores voluptas et quae eum. Amet atque id quisquam iusto repellendus accusantium in. Porro voluptates dignissimos aliquid cupiditate saepe.",
                            EndTime = new DateTime(2025, 5, 11, 1, 55, 34, 213, DateTimeKind.Local).AddTicks(3835),
                            EventCategory = 4,
                            MaxAttendees = 143,
                            RegularPrice = 108.4971557818964980m,
                            StartTime = new DateTime(2025, 5, 10, 22, 16, 50, 398, DateTimeKind.Local).AddTicks(8239),
                            Title = "Fuga necessitatibus natus porro cum.",
                            VipPrice = 162.74573367284474700m
                        },
                        new
                        {
                            Id = -8,
                            CurrentAttendees = 30,
                            Description = "Exercitationem nesciunt itaque accusamus ratione magni minus id maiores. Enim officiis dolores quo fugit qui explicabo animi sint saepe. Corporis consequatur quis illum est quia sit qui harum.",
                            EndTime = new DateTime(2024, 12, 22, 4, 24, 13, 787, DateTimeKind.Local).AddTicks(7782),
                            EventCategory = 1,
                            MaxAttendees = 100,
                            RegularPrice = 954.92050483267360m,
                            StartTime = new DateTime(2024, 12, 22, 3, 14, 34, 49, DateTimeKind.Local).AddTicks(5224),
                            Title = "Dolor qui ipsa laborum est voluptatibus saepe et dolorum ipsa.",
                            VipPrice = 1432.380757249010400m
                        },
                        new
                        {
                            Id = -9,
                            CurrentAttendees = 35,
                            Description = "Dolor aperiam id quis quidem distinctio possimus beatae libero unde. Ipsa sequi impedit illo quia fuga expedita. Soluta ut ullam perferendis accusantium modi. Reprehenderit enim accusamus. Ut qui consequuntur nemo accusamus. Iste distinctio molestiae offi",
                            EndTime = new DateTime(2024, 11, 10, 8, 28, 12, 412, DateTimeKind.Local).AddTicks(684),
                            EventCategory = 5,
                            MaxAttendees = 189,
                            RegularPrice = 310.486063855865140m,
                            StartTime = new DateTime(2024, 11, 10, 6, 35, 35, 908, DateTimeKind.Local).AddTicks(4400),
                            Title = "Natus et suscipit blanditiis qui placeat placeat molestiae dolor.",
                            VipPrice = 465.7290957837977100m
                        },
                        new
                        {
                            Id = -10,
                            CurrentAttendees = 36,
                            Description = "Aut mollitia aut culpa voluptas aut rerum voluptate. Omnis aliquid maxime. Qui in sed cupiditate ea. Dicta et rerum similique quo.",
                            EndTime = new DateTime(2025, 3, 30, 16, 36, 36, 104, DateTimeKind.Local).AddTicks(3255),
                            EventCategory = 1,
                            MaxAttendees = 117,
                            RegularPrice = 973.393709498769340m,
                            StartTime = new DateTime(2025, 3, 30, 15, 29, 25, 176, DateTimeKind.Local).AddTicks(9047),
                            Title = "Omnis ducimus nihil velit voluptas voluptates aut eos non officiis.",
                            VipPrice = 1460.0905642481540100m
                        },
                        new
                        {
                            Id = -11,
                            CurrentAttendees = 43,
                            Description = "Incidunt quo voluptas veritatis beatae aut. Et adipisci id natus qui eum aperiam ut quia labore. Aut eveniet quasi quo nisi error omnis quos alias. Natus non praesentium est ut. Voluptas veniam incidunt cum perspiciatis et ut voluptatem alias corporis.",
                            EndTime = new DateTime(2025, 5, 30, 16, 56, 27, 990, DateTimeKind.Local).AddTicks(5025),
                            EventCategory = 2,
                            MaxAttendees = 142,
                            RegularPrice = 67.7194476192150850m,
                            StartTime = new DateTime(2025, 5, 30, 14, 11, 17, 370, DateTimeKind.Local).AddTicks(816),
                            Title = "Officiis blanditiis quo eos voluptatum facilis.",
                            VipPrice = 101.57917142882262750m
                        },
                        new
                        {
                            Id = -12,
                            CurrentAttendees = 40,
                            Description = "Quis eveniet voluptate velit est. Rem autem rem dolore. Doloremque rem quos sed sint ipsum et ducimus est.",
                            EndTime = new DateTime(2025, 5, 6, 1, 33, 13, 552, DateTimeKind.Local).AddTicks(258),
                            EventCategory = 4,
                            MaxAttendees = 167,
                            RegularPrice = 158.75082722481850m,
                            StartTime = new DateTime(2025, 5, 5, 22, 39, 7, 262, DateTimeKind.Local).AddTicks(4680),
                            Title = "Eligendi et aliquam quia.",
                            VipPrice = 238.126240837227750m
                        },
                        new
                        {
                            Id = -13,
                            CurrentAttendees = 50,
                            Description = "Voluptatum voluptatum et harum. Qui magnam animi hic sunt qui est sunt aut. Error quo at omnis error nesciunt dolor.",
                            EndTime = new DateTime(2025, 1, 17, 18, 10, 29, 512, DateTimeKind.Local).AddTicks(5536),
                            EventCategory = 3,
                            MaxAttendees = 116,
                            RegularPrice = 921.21436767241540m,
                            StartTime = new DateTime(2025, 1, 17, 16, 8, 38, 581, DateTimeKind.Local).AddTicks(1143),
                            Title = "Recusandae rerum dolore maiores nostrum animi occaecati dolores.",
                            VipPrice = 1381.821551508623100m
                        },
                        new
                        {
                            Id = -14,
                            CurrentAttendees = 17,
                            Description = "Asperiores non ratione culpa eos recusandae odit excepturi ea. Placeat occaecati et eius incidunt fugit est quaerat cupiditate et. Rerum consequatur sed soluta ea dicta ad repellendus et. Aut rerum sapiente.",
                            EndTime = new DateTime(2025, 6, 15, 23, 34, 43, 135, DateTimeKind.Local).AddTicks(9676),
                            EventCategory = 4,
                            MaxAttendees = 72,
                            RegularPrice = 330.634516141367560m,
                            StartTime = new DateTime(2025, 6, 15, 19, 46, 39, 440, DateTimeKind.Local).AddTicks(9725),
                            Title = "Quo iste alias quis.",
                            VipPrice = 495.9517742120513400m
                        },
                        new
                        {
                            Id = -15,
                            CurrentAttendees = 43,
                            Description = "Ratione ullam pariatur. Vero dolore numquam quod consectetur molestiae odio iure nemo repellendus. In omnis vero perspiciatis et placeat consequatur. Non rerum beatae eius aspernatur assumenda aliquam id reiciendis.",
                            EndTime = new DateTime(2024, 7, 8, 21, 46, 37, 330, DateTimeKind.Local).AddTicks(3616),
                            EventCategory = 5,
                            MaxAttendees = 165,
                            RegularPrice = 203.49309094283080m,
                            StartTime = new DateTime(2024, 7, 8, 18, 34, 50, 572, DateTimeKind.Local).AddTicks(4575),
                            Title = "Dolorem laborum numquam aut repellendus autem voluptatibus vel modi voluptates.",
                            VipPrice = 305.239636414246200m
                        },
                        new
                        {
                            Id = -16,
                            CurrentAttendees = 50,
                            Description = "Aut iste voluptas autem labore. Adipisci aut inventore aut ipsam. Et nisi animi quibusdam maiores ipsa optio aut minima quaerat. Et vero culpa placeat voluptas veniam animi. Et fugit id consequatur odit perspiciatis. Alias et unde voluptas.",
                            EndTime = new DateTime(2024, 9, 17, 3, 48, 33, 143, DateTimeKind.Local).AddTicks(6308),
                            EventCategory = 6,
                            MaxAttendees = 62,
                            RegularPrice = 383.231190804112630m,
                            StartTime = new DateTime(2024, 9, 17, 2, 31, 34, 580, DateTimeKind.Local).AddTicks(4887),
                            Title = "Eius omnis voluptate minima consequatur aut accusantium qui.",
                            VipPrice = 574.8467862061689450m
                        },
                        new
                        {
                            Id = -17,
                            CurrentAttendees = 43,
                            Description = "Corporis earum in. Sit dolor quia atque est sunt accusamus. Cumque dolore qui laboriosam sit laboriosam cum quae odio dolores.",
                            EndTime = new DateTime(2025, 4, 24, 7, 46, 22, 167, DateTimeKind.Local).AddTicks(4794),
                            EventCategory = 3,
                            MaxAttendees = 180,
                            RegularPrice = 965.891917479254140m,
                            StartTime = new DateTime(2025, 4, 24, 4, 38, 56, 984, DateTimeKind.Local).AddTicks(1895),
                            Title = "Iure totam libero aliquam corporis.",
                            VipPrice = 1448.8378762188812100m
                        },
                        new
                        {
                            Id = -18,
                            CurrentAttendees = 36,
                            Description = "Sint nam cupiditate eveniet quis magnam quia et magnam. Aliquid libero rerum. Voluptatem nam sint soluta est voluptas ea nobis iure eius. Recusandae cupiditate unde tempore temporibus fugit est alias omnis facere.",
                            EndTime = new DateTime(2024, 8, 27, 2, 57, 5, 284, DateTimeKind.Local).AddTicks(7455),
                            EventCategory = 6,
                            MaxAttendees = 127,
                            RegularPrice = 414.194411060764390m,
                            StartTime = new DateTime(2024, 8, 26, 23, 2, 40, 661, DateTimeKind.Local).AddTicks(3134),
                            Title = "Voluptatem sunt aliquid itaque eligendi sit.",
                            VipPrice = 621.2916165911465850m
                        },
                        new
                        {
                            Id = -19,
                            CurrentAttendees = 2,
                            Description = "Ut aliquid id sunt quasi quis qui repellat ea. Perspiciatis aut voluptatem quo nihil unde totam reprehenderit. Quaerat sunt et a. Iure nihil vel. Consequuntur temporibus et at natus deserunt ut.",
                            EndTime = new DateTime(2024, 8, 20, 18, 31, 8, 532, DateTimeKind.Local).AddTicks(9381),
                            EventCategory = 1,
                            MaxAttendees = 174,
                            RegularPrice = 583.040559032258680m,
                            StartTime = new DateTime(2024, 8, 20, 17, 9, 29, 801, DateTimeKind.Local).AddTicks(2713),
                            Title = "Ab consequatur hic in nihil.",
                            VipPrice = 874.5608385483880200m
                        },
                        new
                        {
                            Id = -20,
                            CurrentAttendees = 1,
                            Description = "Sint occaecati ut. Doloribus nisi accusantium voluptas dicta qui mollitia id voluptas mollitia. Incidunt quae non ut. Dignissimos consequatur neque perspiciatis fugit quos facilis.",
                            EndTime = new DateTime(2025, 4, 1, 22, 9, 22, 916, DateTimeKind.Local).AddTicks(2103),
                            EventCategory = 5,
                            MaxAttendees = 92,
                            RegularPrice = 792.254500352883910m,
                            StartTime = new DateTime(2025, 4, 1, 20, 42, 17, 998, DateTimeKind.Local).AddTicks(3972),
                            Title = "Assumenda qui inventore ipsum sunt.",
                            VipPrice = 1188.3817505293258650m
                        });
                });

            modelBuilder.Entity("ECMS.Models.EventCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EventId");

                    b.HasIndex("TicketId");

                    b.ToTable("event_customers");
                });

            modelBuilder.Entity("ECMS.Models.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("facilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            Capacity = 340,
                            Description = "Qui nostrum dolorem soluta voluptatibus sint commodi porro accusantium.",
                            Name = "Zulauf, Fritsch and Johnson"
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            Capacity = 302,
                            Description = "Perferendis ea velit.",
                            Name = "Rath Group"
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 3,
                            Capacity = 360,
                            Description = "Et consequatur est consequuntur sint.",
                            Name = "Schuster, Koss and Renner"
                        },
                        new
                        {
                            Id = 4,
                            AddressId = 4,
                            Capacity = 426,
                            Description = "Hic eum ut dolor est suscipit quas.",
                            Name = "Schoen, Medhurst and Bernier"
                        },
                        new
                        {
                            Id = 5,
                            AddressId = 5,
                            Capacity = 211,
                            Description = "Corporis nulla vel.",
                            Name = "Kling Group"
                        },
                        new
                        {
                            Id = 6,
                            AddressId = 6,
                            Capacity = 152,
                            Description = "Aut non et provident ab architecto.",
                            Name = "Toy Group"
                        },
                        new
                        {
                            Id = 7,
                            AddressId = 7,
                            Capacity = 184,
                            Description = "Veniam mollitia veniam quis distinctio omnis iure distinctio.",
                            Name = "Kuvalis Group"
                        },
                        new
                        {
                            Id = 8,
                            AddressId = 8,
                            Capacity = 308,
                            Description = "Eaque assumenda eveniet nemo natus tempora praesentium.",
                            Name = "Crist LLC"
                        },
                        new
                        {
                            Id = 9,
                            AddressId = 9,
                            Capacity = 412,
                            Description = "Rerum fuga officia animi eius et nam optio.",
                            Name = "Mitchell LLC"
                        },
                        new
                        {
                            Id = 10,
                            AddressId = 10,
                            Capacity = 188,
                            Description = "Eveniet placeat exercitationem tenetur neque omnis ut.",
                            Name = "Koelpin Inc"
                        });
                });

            modelBuilder.Entity("ECMS.Models.FacilitySupplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("SupplierId");

                    b.ToTable("facility_suppliers");
                });

            modelBuilder.Entity("ECMS.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ECMS.Models.OrderProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("order_products");
                });

            modelBuilder.Entity("ECMS.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("persons");
                });

            modelBuilder.Entity("ECMS.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("products");
                });

            modelBuilder.Entity("ECMS.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfGuests")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservationFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReservationTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("reservations");
                });

            modelBuilder.Entity("ECMS.Models.ReservationArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("ReservationId");

                    b.ToTable("reservation_areas");
                });

            modelBuilder.Entity("ECMS.Models.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FromHour")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShiftType")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToHour")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("shifts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FromHour = new DateTime(2023, 12, 9, 2, 3, 54, 479, DateTimeKind.Local).AddTicks(4080),
                            ShiftType = 3,
                            ToHour = new DateTime(2025, 5, 3, 11, 29, 30, 278, DateTimeKind.Local).AddTicks(7605)
                        },
                        new
                        {
                            Id = 2,
                            FromHour = new DateTime(2024, 1, 29, 12, 31, 42, 520, DateTimeKind.Local).AddTicks(6838),
                            ShiftType = 1,
                            ToHour = new DateTime(2024, 11, 16, 12, 7, 42, 519, DateTimeKind.Local).AddTicks(440)
                        },
                        new
                        {
                            Id = 3,
                            FromHour = new DateTime(2024, 1, 16, 12, 6, 52, 485, DateTimeKind.Local).AddTicks(1448),
                            ShiftType = 1,
                            ToHour = new DateTime(2024, 8, 29, 23, 34, 23, 498, DateTimeKind.Local).AddTicks(9119)
                        },
                        new
                        {
                            Id = 4,
                            FromHour = new DateTime(2023, 9, 19, 0, 45, 35, 700, DateTimeKind.Local).AddTicks(9902),
                            ShiftType = 1,
                            ToHour = new DateTime(2024, 12, 9, 7, 17, 44, 694, DateTimeKind.Local).AddTicks(7039)
                        },
                        new
                        {
                            Id = 5,
                            FromHour = new DateTime(2024, 5, 19, 3, 8, 59, 147, DateTimeKind.Local).AddTicks(8362),
                            ShiftType = 2,
                            ToHour = new DateTime(2024, 7, 21, 4, 59, 43, 660, DateTimeKind.Local).AddTicks(8696)
                        },
                        new
                        {
                            Id = 6,
                            FromHour = new DateTime(2024, 5, 13, 8, 28, 58, 334, DateTimeKind.Local).AddTicks(9345),
                            ShiftType = 2,
                            ToHour = new DateTime(2025, 4, 6, 11, 7, 13, 49, DateTimeKind.Local).AddTicks(4428)
                        },
                        new
                        {
                            Id = 7,
                            FromHour = new DateTime(2023, 10, 28, 7, 43, 19, 864, DateTimeKind.Local).AddTicks(8880),
                            ShiftType = 3,
                            ToHour = new DateTime(2024, 9, 4, 10, 26, 47, 873, DateTimeKind.Local).AddTicks(9306)
                        },
                        new
                        {
                            Id = 8,
                            FromHour = new DateTime(2024, 2, 3, 14, 4, 50, 270, DateTimeKind.Local).AddTicks(3910),
                            ShiftType = 1,
                            ToHour = new DateTime(2025, 5, 18, 0, 47, 49, 769, DateTimeKind.Local).AddTicks(9511)
                        },
                        new
                        {
                            Id = 9,
                            FromHour = new DateTime(2023, 7, 3, 23, 11, 37, 787, DateTimeKind.Local).AddTicks(2185),
                            ShiftType = 1,
                            ToHour = new DateTime(2025, 6, 7, 21, 40, 35, 364, DateTimeKind.Local).AddTicks(3375)
                        },
                        new
                        {
                            Id = 10,
                            FromHour = new DateTime(2024, 3, 26, 0, 18, 11, 416, DateTimeKind.Local).AddTicks(2018),
                            ShiftType = 2,
                            ToHour = new DateTime(2025, 5, 3, 21, 13, 15, 739, DateTimeKind.Local).AddTicks(5156)
                        });
                });

            modelBuilder.Entity("ECMS.Models.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("suppliers");
                });

            modelBuilder.Entity("ECMS.Models.SupplierProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId");

                    b.ToTable("supplier_products");
                });

            modelBuilder.Entity("ECMS.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsSeated")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SeatNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("tickets");
                });

            modelBuilder.Entity("ECMS.Models.Area", b =>
                {
                    b.HasOne("ECMS.Models.Facility", "Facility")
                        .WithMany("Areas")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("ECMS.Models.AreaEvent", b =>
                {
                    b.HasOne("ECMS.Models.Area", "Area")
                        .WithMany("AreaEvents")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Event", "Event")
                        .WithMany("AreaEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ECMS.Models.Customer", b =>
                {
                    b.HasOne("ECMS.Models.Person", "Person")
                        .WithOne("Customer")
                        .HasForeignKey("ECMS.Models.Customer", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ECMS.Models.Employee", b =>
                {
                    b.HasOne("ECMS.Models.Area", "Area")
                        .WithMany("Employees")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("ECMS.Models.Person", "Person")
                        .WithOne("Employee")
                        .HasForeignKey("ECMS.Models.Employee", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Shift", "Shift")
                        .WithMany("Employees")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Employee", "Supervisor")
                        .WithMany()
                        .HasForeignKey("SupervisorId");

                    b.Navigation("Area");

                    b.Navigation("Department");

                    b.Navigation("Person");

                    b.Navigation("Shift");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("ECMS.Models.EventCustomer", b =>
                {
                    b.HasOne("ECMS.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Event", "Event")
                        .WithMany("EventCustomers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Ticket", "Ticket")
                        .WithMany("EventCustomers")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Event");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("ECMS.Models.Facility", b =>
                {
                    b.HasOne("ECMS.Models.Address", "Address")
                        .WithMany("Facilities")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("ECMS.Models.FacilitySupplier", b =>
                {
                    b.HasOne("ECMS.Models.Facility", "Facility")
                        .WithMany("FacilitySuppliers")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Supplier", "Supplier")
                        .WithMany("FacilitySuppliers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("ECMS.Models.Order", b =>
                {
                    b.HasOne("ECMS.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ECMS.Models.OrderProduct", b =>
                {
                    b.HasOne("ECMS.Models.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECMS.Models.Reservation", b =>
                {
                    b.HasOne("ECMS.Models.Customer", null)
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("ECMS.Models.ReservationArea", b =>
                {
                    b.HasOne("ECMS.Models.Area", "Area")
                        .WithMany("ReservationAreas")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Reservation", "Reservation")
                        .WithMany("ReservationAreas")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("ECMS.Models.Supplier", b =>
                {
                    b.HasOne("ECMS.Models.Address", "Address")
                        .WithMany("Suppliers")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("ECMS.Models.SupplierProduct", b =>
                {
                    b.HasOne("ECMS.Models.Product", "Product")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Supplier", "Supplier")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("ECMS.Models.Address", b =>
                {
                    b.Navigation("Facilities");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("ECMS.Models.Area", b =>
                {
                    b.Navigation("AreaEvents");

                    b.Navigation("Employees");

                    b.Navigation("ReservationAreas");
                });

            modelBuilder.Entity("ECMS.Models.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("ECMS.Models.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ECMS.Models.Event", b =>
                {
                    b.Navigation("AreaEvents");

                    b.Navigation("EventCustomers");
                });

            modelBuilder.Entity("ECMS.Models.Facility", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("FacilitySuppliers");
                });

            modelBuilder.Entity("ECMS.Models.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("ECMS.Models.Person", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("Employee")
                        .IsRequired();
                });

            modelBuilder.Entity("ECMS.Models.Product", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("SupplierProducts");
                });

            modelBuilder.Entity("ECMS.Models.Reservation", b =>
                {
                    b.Navigation("ReservationAreas");
                });

            modelBuilder.Entity("ECMS.Models.Shift", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ECMS.Models.Supplier", b =>
                {
                    b.Navigation("FacilitySuppliers");

                    b.Navigation("SupplierProducts");
                });

            modelBuilder.Entity("ECMS.Models.Ticket", b =>
                {
                    b.Navigation("EventCustomers");
                });
#pragma warning restore 612, 618
        }
    }
}
