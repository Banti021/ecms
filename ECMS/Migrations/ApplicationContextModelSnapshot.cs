// <auto-generated />
using System;
using ECMS.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECMS.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.4.24267.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ECMS.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BuildingNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BuildingNo = "4504",
                            City = "Isacmouth",
                            Street = "Deborah Keys"
                        },
                        new
                        {
                            Id = 2,
                            BuildingNo = "6828",
                            City = "Lornahaven",
                            Street = "Glover Mission"
                        },
                        new
                        {
                            Id = 3,
                            BuildingNo = "165",
                            City = "South Arnold",
                            Street = "Cameron Shore"
                        },
                        new
                        {
                            Id = 4,
                            BuildingNo = "565",
                            City = "Flatleyhaven",
                            Street = "Cierra Mountain"
                        },
                        new
                        {
                            Id = 5,
                            BuildingNo = "240",
                            City = "Lauraview",
                            Street = "Sabina Overpass"
                        },
                        new
                        {
                            Id = 6,
                            BuildingNo = "6247",
                            City = "West Jacquelyn",
                            Street = "Shanny Row"
                        },
                        new
                        {
                            Id = 7,
                            BuildingNo = "046",
                            City = "Port Samir",
                            Street = "Bonita Mill"
                        },
                        new
                        {
                            Id = 8,
                            BuildingNo = "31084",
                            City = "Luettgenview",
                            Street = "Yost Throughway"
                        },
                        new
                        {
                            Id = 9,
                            BuildingNo = "17969",
                            City = "East Tyson",
                            Street = "Marcia Rapids"
                        },
                        new
                        {
                            Id = 10,
                            BuildingNo = "03049",
                            City = "West Oliver",
                            Street = "Kulas Summit"
                        });
                });

            modelBuilder.Entity("ECMS.Models.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.ToTable("areas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 93,
                            Description = "Omnis et libero commodi.",
                            FacilityId = 1,
                            IsAvailable = true,
                            Name = "Centralized grid-enabled infrastructure"
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 81,
                            Description = "Vero mollitia qui.",
                            FacilityId = 1,
                            IsAvailable = true,
                            Name = "De-engineered disintermediate application"
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 131,
                            Description = "Ullam tempora illo architecto quos autem natus.",
                            FacilityId = 1,
                            IsAvailable = false,
                            Name = "Synchronised zero defect conglomeration"
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 90,
                            Description = "Assumenda qui totam dolorum voluptatibus voluptatem.",
                            FacilityId = 1,
                            IsAvailable = false,
                            Name = "Progressive multi-tasking architecture"
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 157,
                            Description = "Eius odit et voluptatem velit quam ducimus voluptatem quaerat maxime.",
                            FacilityId = 1,
                            IsAvailable = false,
                            Name = "Monitored bi-directional moratorium"
                        },
                        new
                        {
                            Id = 6,
                            Capacity = 190,
                            Description = "Et rerum sit sit.",
                            FacilityId = 2,
                            IsAvailable = false,
                            Name = "Right-sized systematic info-mediaries"
                        },
                        new
                        {
                            Id = 7,
                            Capacity = 103,
                            Description = "Dolores dolores fuga est.",
                            FacilityId = 2,
                            IsAvailable = true,
                            Name = "Organized dynamic throughput"
                        },
                        new
                        {
                            Id = 8,
                            Capacity = 59,
                            Description = "Ducimus esse amet quam dolorem.",
                            FacilityId = 2,
                            IsAvailable = true,
                            Name = "Up-sized system-worthy workforce"
                        },
                        new
                        {
                            Id = 9,
                            Capacity = 128,
                            Description = "Optio aperiam eveniet voluptatem eos rerum.",
                            FacilityId = 2,
                            IsAvailable = false,
                            Name = "Streamlined eco-centric concept"
                        },
                        new
                        {
                            Id = 10,
                            Capacity = 162,
                            Description = "Est possimus earum quia et veniam aut quos unde officia.",
                            FacilityId = 2,
                            IsAvailable = true,
                            Name = "Customer-focused asynchronous extranet"
                        },
                        new
                        {
                            Id = 11,
                            Capacity = 51,
                            Description = "Et minima blanditiis voluptatibus vel earum temporibus doloribus.",
                            FacilityId = 3,
                            IsAvailable = false,
                            Name = "Robust optimal implementation"
                        },
                        new
                        {
                            Id = 12,
                            Capacity = 53,
                            Description = "Earum qui illo nobis.",
                            FacilityId = 3,
                            IsAvailable = false,
                            Name = "Innovative homogeneous complexity"
                        },
                        new
                        {
                            Id = 13,
                            Capacity = 75,
                            Description = "Et odio qui.",
                            FacilityId = 3,
                            IsAvailable = true,
                            Name = "Persistent attitude-oriented productivity"
                        },
                        new
                        {
                            Id = 14,
                            Capacity = 117,
                            Description = "Soluta molestiae sit et ullam odit dicta nisi.",
                            FacilityId = 3,
                            IsAvailable = true,
                            Name = "Self-enabling 3rd generation firmware"
                        },
                        new
                        {
                            Id = 15,
                            Capacity = 88,
                            Description = "Nam doloribus quod eos impedit est deserunt.",
                            FacilityId = 3,
                            IsAvailable = true,
                            Name = "Customer-focused value-added toolset"
                        },
                        new
                        {
                            Id = 16,
                            Capacity = 69,
                            Description = "Quos consequatur consequatur.",
                            FacilityId = 4,
                            IsAvailable = true,
                            Name = "Ergonomic local matrices"
                        },
                        new
                        {
                            Id = 17,
                            Capacity = 96,
                            Description = "Deserunt tempora eos adipisci qui quod voluptates reiciendis.",
                            FacilityId = 4,
                            IsAvailable = true,
                            Name = "Public-key asynchronous budgetary management"
                        },
                        new
                        {
                            Id = 18,
                            Capacity = 163,
                            Description = "Eveniet corporis voluptate cumque quidem consequatur voluptas at non quidem.",
                            FacilityId = 4,
                            IsAvailable = false,
                            Name = "Centralized actuating attitude"
                        },
                        new
                        {
                            Id = 19,
                            Capacity = 82,
                            Description = "Dolorum ad voluptatum sed.",
                            FacilityId = 4,
                            IsAvailable = true,
                            Name = "Devolved executive workforce"
                        },
                        new
                        {
                            Id = 20,
                            Capacity = 73,
                            Description = "Quia sunt id.",
                            FacilityId = 4,
                            IsAvailable = true,
                            Name = "Implemented 24/7 software"
                        },
                        new
                        {
                            Id = 21,
                            Capacity = 84,
                            Description = "Cupiditate veniam delectus hic amet nostrum quae qui.",
                            FacilityId = 5,
                            IsAvailable = true,
                            Name = "Profound bi-directional moratorium"
                        },
                        new
                        {
                            Id = 22,
                            Capacity = 89,
                            Description = "Fugit tempora in exercitationem rerum ad eum consectetur consequatur.",
                            FacilityId = 5,
                            IsAvailable = false,
                            Name = "Persistent heuristic intranet"
                        },
                        new
                        {
                            Id = 23,
                            Capacity = 159,
                            Description = "Voluptatem in molestias recusandae sit mollitia voluptates hic.",
                            FacilityId = 5,
                            IsAvailable = true,
                            Name = "User-centric bi-directional middleware"
                        },
                        new
                        {
                            Id = 24,
                            Capacity = 83,
                            Description = "Deleniti praesentium repellat repudiandae dolor nesciunt dolores.",
                            FacilityId = 5,
                            IsAvailable = true,
                            Name = "Polarised global secured line"
                        },
                        new
                        {
                            Id = 25,
                            Capacity = 112,
                            Description = "Ut architecto explicabo doloremque maiores doloremque ea ad facilis.",
                            FacilityId = 5,
                            IsAvailable = false,
                            Name = "Cloned interactive budgetary management"
                        },
                        new
                        {
                            Id = 26,
                            Capacity = 121,
                            Description = "Error ipsam non.",
                            FacilityId = 6,
                            IsAvailable = true,
                            Name = "Polarised transitional Graphic Interface"
                        },
                        new
                        {
                            Id = 27,
                            Capacity = 120,
                            Description = "Et id corporis optio voluptatem impedit aut.",
                            FacilityId = 6,
                            IsAvailable = true,
                            Name = "Ameliorated non-volatile frame"
                        },
                        new
                        {
                            Id = 28,
                            Capacity = 90,
                            Description = "Unde quo ratione repellendus.",
                            FacilityId = 6,
                            IsAvailable = true,
                            Name = "Distributed disintermediate matrix"
                        },
                        new
                        {
                            Id = 29,
                            Capacity = 182,
                            Description = "Incidunt placeat est voluptatem suscipit doloribus.",
                            FacilityId = 6,
                            IsAvailable = true,
                            Name = "Focused client-driven hub"
                        },
                        new
                        {
                            Id = 30,
                            Capacity = 125,
                            Description = "Animi doloremque sint tenetur alias.",
                            FacilityId = 6,
                            IsAvailable = true,
                            Name = "Open-architected explicit core"
                        },
                        new
                        {
                            Id = 31,
                            Capacity = 165,
                            Description = "Saepe magni beatae et numquam.",
                            FacilityId = 7,
                            IsAvailable = true,
                            Name = "Progressive client-server application"
                        },
                        new
                        {
                            Id = 32,
                            Capacity = 189,
                            Description = "Ut dignissimos mollitia consequatur.",
                            FacilityId = 7,
                            IsAvailable = true,
                            Name = "Customizable disintermediate parallelism"
                        },
                        new
                        {
                            Id = 33,
                            Capacity = 61,
                            Description = "Ab sint occaecati.",
                            FacilityId = 7,
                            IsAvailable = false,
                            Name = "Monitored regional internet solution"
                        },
                        new
                        {
                            Id = 34,
                            Capacity = 178,
                            Description = "Corporis quibusdam labore soluta omnis natus ipsa repudiandae.",
                            FacilityId = 7,
                            IsAvailable = false,
                            Name = "Intuitive real-time middleware"
                        },
                        new
                        {
                            Id = 35,
                            Capacity = 61,
                            Description = "Quidem veritatis optio officia commodi.",
                            FacilityId = 7,
                            IsAvailable = false,
                            Name = "Vision-oriented background framework"
                        },
                        new
                        {
                            Id = 36,
                            Capacity = 123,
                            Description = "Sit est sit dolores dolore.",
                            FacilityId = 8,
                            IsAvailable = false,
                            Name = "Fundamental empowering hub"
                        },
                        new
                        {
                            Id = 37,
                            Capacity = 124,
                            Description = "Aliquid dolor omnis vel quidem dolorem.",
                            FacilityId = 8,
                            IsAvailable = true,
                            Name = "Expanded full-range circuit"
                        },
                        new
                        {
                            Id = 38,
                            Capacity = 173,
                            Description = "Adipisci temporibus est esse neque rerum.",
                            FacilityId = 8,
                            IsAvailable = true,
                            Name = "Enterprise-wide bi-directional challenge"
                        },
                        new
                        {
                            Id = 39,
                            Capacity = 91,
                            Description = "Consequatur porro sed.",
                            FacilityId = 8,
                            IsAvailable = false,
                            Name = "User-centric object-oriented knowledge base"
                        },
                        new
                        {
                            Id = 40,
                            Capacity = 95,
                            Description = "Id facere corrupti iusto qui nulla.",
                            FacilityId = 8,
                            IsAvailable = true,
                            Name = "Profound intermediate installation"
                        },
                        new
                        {
                            Id = 41,
                            Capacity = 166,
                            Description = "Laborum explicabo deleniti assumenda.",
                            FacilityId = 9,
                            IsAvailable = true,
                            Name = "User-friendly intangible throughput"
                        },
                        new
                        {
                            Id = 42,
                            Capacity = 180,
                            Description = "Iure nostrum voluptatum nesciunt nostrum nam doloribus.",
                            FacilityId = 9,
                            IsAvailable = false,
                            Name = "Operative multi-state instruction set"
                        },
                        new
                        {
                            Id = 43,
                            Capacity = 71,
                            Description = "Distinctio voluptatum temporibus consectetur consequatur.",
                            FacilityId = 9,
                            IsAvailable = true,
                            Name = "Operative leading edge installation"
                        },
                        new
                        {
                            Id = 44,
                            Capacity = 106,
                            Description = "Labore quibusdam voluptatem rem aut recusandae.",
                            FacilityId = 9,
                            IsAvailable = true,
                            Name = "Progressive radical implementation"
                        },
                        new
                        {
                            Id = 45,
                            Capacity = 60,
                            Description = "Ut ipsam amet sint tenetur possimus maxime natus commodi placeat.",
                            FacilityId = 9,
                            IsAvailable = true,
                            Name = "Cross-group contextually-based definition"
                        },
                        new
                        {
                            Id = 46,
                            Capacity = 153,
                            Description = "Ab quae cupiditate vel et at reiciendis.",
                            FacilityId = 10,
                            IsAvailable = true,
                            Name = "Organic systemic intranet"
                        },
                        new
                        {
                            Id = 47,
                            Capacity = 187,
                            Description = "Blanditiis suscipit rerum qui.",
                            FacilityId = 10,
                            IsAvailable = true,
                            Name = "Pre-emptive value-added collaboration"
                        },
                        new
                        {
                            Id = 48,
                            Capacity = 179,
                            Description = "Qui explicabo vero.",
                            FacilityId = 10,
                            IsAvailable = true,
                            Name = "Expanded radical protocol"
                        },
                        new
                        {
                            Id = 49,
                            Capacity = 122,
                            Description = "Non sequi officiis dolorem quaerat nihil.",
                            FacilityId = 10,
                            IsAvailable = false,
                            Name = "Grass-roots eco-centric leverage"
                        },
                        new
                        {
                            Id = 50,
                            Capacity = 82,
                            Description = "Quo distinctio voluptas et itaque labore minus cupiditate.",
                            FacilityId = 10,
                            IsAvailable = false,
                            Name = "Self-enabling impactful concept"
                        });
                });

            modelBuilder.Entity("ECMS.Models.AreaEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("EventId");

                    b.ToTable("area_events");
                });

            modelBuilder.Entity("ECMS.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastVisit")
                        .HasColumnType("datetime2");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("customers");
                });

            modelBuilder.Entity("ECMS.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Eum aut earum deleniti occaecati.",
                            EmployeeCount = 14,
                            Name = "Sports & Outdoors"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Et explicabo occaecati dolor vitae laboriosam.",
                            EmployeeCount = 15,
                            Name = "Beauty, Garden & Movies"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Repudiandae sit qui velit dolores veniam nobis eius est provident.",
                            EmployeeCount = 11,
                            Name = "Music"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Quo temporibus ut laboriosam dolorem magnam et aut.",
                            EmployeeCount = 45,
                            Name = "Music"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Dolorem recusandae quasi odio vel est.",
                            EmployeeCount = 10,
                            Name = "Tools"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Perspiciatis autem quis et id.",
                            EmployeeCount = 13,
                            Name = "Clothing"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Nihil et omnis ea dolorem dicta vel rerum.",
                            EmployeeCount = 47,
                            Name = "Clothing & Shoes"
                        },
                        new
                        {
                            Id = 8,
                            Description = "In delectus architecto.",
                            EmployeeCount = 26,
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Fuga perferendis illum ipsam beatae eum tempore sed illum non.",
                            EmployeeCount = 35,
                            Name = "Electronics, Baby & Tools"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Praesentium totam et.",
                            EmployeeCount = 43,
                            Name = "Games"
                        });
                });

            modelBuilder.Entity("ECMS.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("HireDate")
                        .HasColumnType("date");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ShiftId")
                        .HasColumnType("int");

                    b.Property<int?>("SupervisorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.HasIndex("ShiftId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("ECMS.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrentAttendees")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventCategory")
                        .HasColumnType("int");

                    b.Property<int>("MaxAttendees")
                        .HasColumnType("int");

                    b.Property<decimal>("RegularPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("VipPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.ToTable("events");
                });

            modelBuilder.Entity("ECMS.Models.EventCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EventId");

                    b.HasIndex("TicketId");

                    b.ToTable("event_customers");
                });

            modelBuilder.Entity("ECMS.Models.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("facilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            Capacity = 236,
                            Description = "Aut distinctio pariatur est repellendus praesentium vel voluptatem eum.",
                            Name = "Kassulke, Haley and Volkman"
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            Capacity = 496,
                            Description = "In voluptatem corporis.",
                            Name = "DuBuque, Bartoletti and Smith"
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 3,
                            Capacity = 337,
                            Description = "Facere provident neque sed voluptatibus exercitationem voluptatem debitis.",
                            Name = "Haley Group"
                        },
                        new
                        {
                            Id = 4,
                            AddressId = 4,
                            Capacity = 166,
                            Description = "Nostrum placeat veritatis est illo quia ea harum.",
                            Name = "Bednar - Cronin"
                        },
                        new
                        {
                            Id = 5,
                            AddressId = 5,
                            Capacity = 207,
                            Description = "Voluptatem totam sed hic est qui qui sunt.",
                            Name = "Lang - Terry"
                        },
                        new
                        {
                            Id = 6,
                            AddressId = 6,
                            Capacity = 268,
                            Description = "Facere aut quia magnam est voluptas minus.",
                            Name = "Littel and Sons"
                        },
                        new
                        {
                            Id = 7,
                            AddressId = 7,
                            Capacity = 203,
                            Description = "Tempora accusamus vel rerum iusto ad consequatur sed dolores ducimus.",
                            Name = "Runte, Batz and Olson"
                        },
                        new
                        {
                            Id = 8,
                            AddressId = 8,
                            Capacity = 104,
                            Description = "Animi officia maxime.",
                            Name = "Moore - Hintz"
                        },
                        new
                        {
                            Id = 9,
                            AddressId = 9,
                            Capacity = 233,
                            Description = "Aut at maxime ut est unde repudiandae maiores est.",
                            Name = "Goldner Inc"
                        },
                        new
                        {
                            Id = 10,
                            AddressId = 10,
                            Capacity = 129,
                            Description = "Ea ut eos eum sint fugiat.",
                            Name = "Walter, Thompson and Volkman"
                        });
                });

            modelBuilder.Entity("ECMS.Models.FacilitySupplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("SupplierId");

                    b.ToTable("facility_suppliers");
                });

            modelBuilder.Entity("ECMS.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ECMS.Models.OrderProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("order_products");
                });

            modelBuilder.Entity("ECMS.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("persons");
                });

            modelBuilder.Entity("ECMS.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("products");
                });

            modelBuilder.Entity("ECMS.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfGuests")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservationFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReservationTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("reservations");
                });

            modelBuilder.Entity("ECMS.Models.ReservationArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("ReservationId");

                    b.ToTable("reservation_areas");
                });

            modelBuilder.Entity("ECMS.Models.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FromHour")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShiftType")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToHour")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("shifts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FromHour = new DateTime(2024, 4, 10, 16, 55, 52, 228, DateTimeKind.Local).AddTicks(7661),
                            ShiftType = 1,
                            ToHour = new DateTime(2024, 9, 30, 11, 3, 22, 344, DateTimeKind.Local).AddTicks(642)
                        },
                        new
                        {
                            Id = 2,
                            FromHour = new DateTime(2023, 10, 18, 18, 5, 5, 624, DateTimeKind.Local).AddTicks(4986),
                            ShiftType = 2,
                            ToHour = new DateTime(2025, 1, 11, 11, 22, 4, 697, DateTimeKind.Local).AddTicks(967)
                        },
                        new
                        {
                            Id = 3,
                            FromHour = new DateTime(2023, 12, 2, 5, 54, 8, 513, DateTimeKind.Local).AddTicks(4157),
                            ShiftType = 3,
                            ToHour = new DateTime(2024, 12, 25, 9, 2, 6, 405, DateTimeKind.Local).AddTicks(6428)
                        },
                        new
                        {
                            Id = 4,
                            FromHour = new DateTime(2023, 12, 19, 17, 9, 49, 821, DateTimeKind.Local).AddTicks(7674),
                            ShiftType = 2,
                            ToHour = new DateTime(2024, 12, 1, 17, 50, 36, 526, DateTimeKind.Local).AddTicks(8149)
                        },
                        new
                        {
                            Id = 5,
                            FromHour = new DateTime(2023, 9, 9, 9, 31, 38, 679, DateTimeKind.Local).AddTicks(5907),
                            ShiftType = 1,
                            ToHour = new DateTime(2025, 4, 6, 3, 36, 38, 621, DateTimeKind.Local).AddTicks(7955)
                        },
                        new
                        {
                            Id = 6,
                            FromHour = new DateTime(2023, 9, 1, 4, 11, 4, 14, DateTimeKind.Local).AddTicks(5291),
                            ShiftType = 2,
                            ToHour = new DateTime(2024, 10, 21, 7, 3, 54, 736, DateTimeKind.Local).AddTicks(7556)
                        },
                        new
                        {
                            Id = 7,
                            FromHour = new DateTime(2023, 10, 5, 20, 5, 20, 256, DateTimeKind.Local).AddTicks(569),
                            ShiftType = 2,
                            ToHour = new DateTime(2024, 9, 23, 7, 35, 53, 570, DateTimeKind.Local).AddTicks(90)
                        },
                        new
                        {
                            Id = 8,
                            FromHour = new DateTime(2023, 10, 11, 11, 0, 51, 639, DateTimeKind.Local).AddTicks(6231),
                            ShiftType = 2,
                            ToHour = new DateTime(2024, 11, 27, 2, 18, 43, 847, DateTimeKind.Local).AddTicks(8245)
                        },
                        new
                        {
                            Id = 9,
                            FromHour = new DateTime(2023, 8, 8, 22, 12, 5, 586, DateTimeKind.Local).AddTicks(8637),
                            ShiftType = 1,
                            ToHour = new DateTime(2025, 2, 10, 3, 2, 50, 933, DateTimeKind.Local).AddTicks(7278)
                        },
                        new
                        {
                            Id = 10,
                            FromHour = new DateTime(2023, 8, 25, 1, 2, 5, 409, DateTimeKind.Local).AddTicks(6015),
                            ShiftType = 3,
                            ToHour = new DateTime(2024, 10, 4, 3, 54, 6, 860, DateTimeKind.Local).AddTicks(581)
                        });
                });

            modelBuilder.Entity("ECMS.Models.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("suppliers");
                });

            modelBuilder.Entity("ECMS.Models.SupplierProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId");

                    b.ToTable("supplier_products");
                });

            modelBuilder.Entity("ECMS.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsSeated")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SeatNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("tickets");
                });

            modelBuilder.Entity("ECMS.Models.Area", b =>
                {
                    b.HasOne("ECMS.Models.Facility", "Facility")
                        .WithMany("Areas")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("ECMS.Models.AreaEvent", b =>
                {
                    b.HasOne("ECMS.Models.Area", "Area")
                        .WithMany("AreaEvents")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Event", "Event")
                        .WithMany("AreaEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ECMS.Models.Customer", b =>
                {
                    b.HasOne("ECMS.Models.Person", "Person")
                        .WithOne("Customer")
                        .HasForeignKey("ECMS.Models.Customer", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ECMS.Models.Employee", b =>
                {
                    b.HasOne("ECMS.Models.Area", "Area")
                        .WithMany("Employees")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("ECMS.Models.Person", "Person")
                        .WithOne("Employee")
                        .HasForeignKey("ECMS.Models.Employee", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Shift", "Shift")
                        .WithMany("Employees")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Employee", "Supervisor")
                        .WithMany()
                        .HasForeignKey("SupervisorId");

                    b.Navigation("Area");

                    b.Navigation("Department");

                    b.Navigation("Person");

                    b.Navigation("Shift");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("ECMS.Models.EventCustomer", b =>
                {
                    b.HasOne("ECMS.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Event", "Event")
                        .WithMany("EventCustomers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Ticket", "Ticket")
                        .WithMany("EventCustomers")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Event");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("ECMS.Models.Facility", b =>
                {
                    b.HasOne("ECMS.Models.Address", "Address")
                        .WithMany("Facilities")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("ECMS.Models.FacilitySupplier", b =>
                {
                    b.HasOne("ECMS.Models.Facility", "Facility")
                        .WithMany("FacilitySuppliers")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Supplier", "Supplier")
                        .WithMany("FacilitySuppliers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("ECMS.Models.Order", b =>
                {
                    b.HasOne("ECMS.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ECMS.Models.OrderProduct", b =>
                {
                    b.HasOne("ECMS.Models.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECMS.Models.Reservation", b =>
                {
                    b.HasOne("ECMS.Models.Customer", null)
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("ECMS.Models.ReservationArea", b =>
                {
                    b.HasOne("ECMS.Models.Area", "Area")
                        .WithMany("ReservationAreas")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Reservation", "Reservation")
                        .WithMany("ReservationAreas")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("ECMS.Models.Supplier", b =>
                {
                    b.HasOne("ECMS.Models.Address", "Address")
                        .WithMany("Suppliers")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("ECMS.Models.SupplierProduct", b =>
                {
                    b.HasOne("ECMS.Models.Product", "Product")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Supplier", "Supplier")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("ECMS.Models.Address", b =>
                {
                    b.Navigation("Facilities");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("ECMS.Models.Area", b =>
                {
                    b.Navigation("AreaEvents");

                    b.Navigation("Employees");

                    b.Navigation("ReservationAreas");
                });

            modelBuilder.Entity("ECMS.Models.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("ECMS.Models.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ECMS.Models.Event", b =>
                {
                    b.Navigation("AreaEvents");

                    b.Navigation("EventCustomers");
                });

            modelBuilder.Entity("ECMS.Models.Facility", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("FacilitySuppliers");
                });

            modelBuilder.Entity("ECMS.Models.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("ECMS.Models.Person", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("Employee")
                        .IsRequired();
                });

            modelBuilder.Entity("ECMS.Models.Product", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("SupplierProducts");
                });

            modelBuilder.Entity("ECMS.Models.Reservation", b =>
                {
                    b.Navigation("ReservationAreas");
                });

            modelBuilder.Entity("ECMS.Models.Shift", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ECMS.Models.Supplier", b =>
                {
                    b.Navigation("FacilitySuppliers");

                    b.Navigation("SupplierProducts");
                });

            modelBuilder.Entity("ECMS.Models.Ticket", b =>
                {
                    b.Navigation("EventCustomers");
                });
#pragma warning restore 612, 618
        }
    }
}
