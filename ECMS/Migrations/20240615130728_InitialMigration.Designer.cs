// <auto-generated />
using System;
using ECMS.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECMS.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240615130728_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.4.24267.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ECMS.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BuildingNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BuildingNo = "2097",
                            City = "Liamshire",
                            Street = "Klein Orchard"
                        },
                        new
                        {
                            Id = 2,
                            BuildingNo = "455",
                            City = "Port Gayle",
                            Street = "Homenick Pass"
                        },
                        new
                        {
                            Id = 3,
                            BuildingNo = "429",
                            City = "Pfeffermouth",
                            Street = "Xzavier Dale"
                        },
                        new
                        {
                            Id = 4,
                            BuildingNo = "07498",
                            City = "Torpton",
                            Street = "Cale Pines"
                        },
                        new
                        {
                            Id = 5,
                            BuildingNo = "8289",
                            City = "Thereseview",
                            Street = "Jones Vista"
                        },
                        new
                        {
                            Id = 6,
                            BuildingNo = "1905",
                            City = "Janiceville",
                            Street = "Moore Meadows"
                        },
                        new
                        {
                            Id = 7,
                            BuildingNo = "076",
                            City = "Lake Hattiechester",
                            Street = "Vernice Shore"
                        },
                        new
                        {
                            Id = 8,
                            BuildingNo = "00703",
                            City = "Rohanmouth",
                            Street = "Wilfredo Lakes"
                        },
                        new
                        {
                            Id = 9,
                            BuildingNo = "5824",
                            City = "South Kaycee",
                            Street = "Jules Skyway"
                        },
                        new
                        {
                            Id = 10,
                            BuildingNo = "1513",
                            City = "Ethelynstad",
                            Street = "Fay Lights"
                        });
                });

            modelBuilder.Entity("ECMS.Models.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.ToTable("areas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 171,
                            Description = "Vel nisi quia nisi dolorum rerum reprehenderit impedit et doloremque.",
                            FacilityId = 1,
                            IsAvailable = true,
                            Name = "De-engineered modular data-warehouse"
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 190,
                            Description = "Dignissimos ex totam atque ullam molestiae.",
                            FacilityId = 1,
                            IsAvailable = true,
                            Name = "Implemented clear-thinking definition"
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 197,
                            Description = "Non assumenda quia voluptates facere.",
                            FacilityId = 1,
                            IsAvailable = true,
                            Name = "Cross-platform responsive data-warehouse"
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 61,
                            Description = "Amet ut sed enim optio magni aut impedit.",
                            FacilityId = 1,
                            IsAvailable = true,
                            Name = "Re-engineered demand-driven function"
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 174,
                            Description = "Perferendis aut nihil dolorum in voluptatem iure similique labore exercitationem.",
                            FacilityId = 1,
                            IsAvailable = false,
                            Name = "Horizontal bottom-line standardization"
                        },
                        new
                        {
                            Id = 6,
                            Capacity = 99,
                            Description = "Repellendus incidunt quasi inventore sunt nostrum incidunt dignissimos aliquid libero.",
                            FacilityId = 2,
                            IsAvailable = false,
                            Name = "Re-contextualized asymmetric initiative"
                        },
                        new
                        {
                            Id = 7,
                            Capacity = 76,
                            Description = "A culpa officia ipsam eaque repudiandae ipsa consequatur vel vel.",
                            FacilityId = 2,
                            IsAvailable = true,
                            Name = "Future-proofed context-sensitive firmware"
                        },
                        new
                        {
                            Id = 8,
                            Capacity = 82,
                            Description = "Non dolore officia.",
                            FacilityId = 2,
                            IsAvailable = false,
                            Name = "Open-source multi-state architecture"
                        },
                        new
                        {
                            Id = 9,
                            Capacity = 66,
                            Description = "Error laudantium eos.",
                            FacilityId = 2,
                            IsAvailable = false,
                            Name = "Cloned 3rd generation workforce"
                        },
                        new
                        {
                            Id = 10,
                            Capacity = 102,
                            Description = "Atque cum maxime explicabo enim fuga nesciunt et saepe temporibus.",
                            FacilityId = 2,
                            IsAvailable = true,
                            Name = "Organic global info-mediaries"
                        },
                        new
                        {
                            Id = 11,
                            Capacity = 99,
                            Description = "Error in error praesentium.",
                            FacilityId = 3,
                            IsAvailable = false,
                            Name = "Monitored human-resource adapter"
                        },
                        new
                        {
                            Id = 12,
                            Capacity = 104,
                            Description = "Molestias libero natus cupiditate est at suscipit veritatis.",
                            FacilityId = 3,
                            IsAvailable = false,
                            Name = "Synergistic client-server archive"
                        },
                        new
                        {
                            Id = 13,
                            Capacity = 178,
                            Description = "Eos eum tenetur optio.",
                            FacilityId = 3,
                            IsAvailable = true,
                            Name = "Customizable system-worthy benchmark"
                        },
                        new
                        {
                            Id = 14,
                            Capacity = 113,
                            Description = "Accusantium nobis deserunt odit consequatur.",
                            FacilityId = 3,
                            IsAvailable = false,
                            Name = "Focused optimizing alliance"
                        },
                        new
                        {
                            Id = 15,
                            Capacity = 134,
                            Description = "Possimus quo impedit tempora natus sint in repudiandae.",
                            FacilityId = 3,
                            IsAvailable = false,
                            Name = "Assimilated cohesive policy"
                        },
                        new
                        {
                            Id = 16,
                            Capacity = 149,
                            Description = "Voluptates optio velit in veritatis tempore cupiditate occaecati qui voluptas.",
                            FacilityId = 4,
                            IsAvailable = false,
                            Name = "Optimized client-server extranet"
                        },
                        new
                        {
                            Id = 17,
                            Capacity = 125,
                            Description = "Praesentium incidunt autem id.",
                            FacilityId = 4,
                            IsAvailable = true,
                            Name = "Mandatory tertiary data-warehouse"
                        },
                        new
                        {
                            Id = 18,
                            Capacity = 180,
                            Description = "Tenetur in inventore veniam eligendi alias corporis.",
                            FacilityId = 4,
                            IsAvailable = true,
                            Name = "Multi-layered scalable algorithm"
                        },
                        new
                        {
                            Id = 19,
                            Capacity = 59,
                            Description = "Sed iste est perspiciatis est sapiente.",
                            FacilityId = 4,
                            IsAvailable = false,
                            Name = "Polarised executive time-frame"
                        },
                        new
                        {
                            Id = 20,
                            Capacity = 179,
                            Description = "Optio possimus beatae iusto corrupti quis minus sed in.",
                            FacilityId = 4,
                            IsAvailable = false,
                            Name = "Multi-lateral scalable Graphic Interface"
                        },
                        new
                        {
                            Id = 21,
                            Capacity = 115,
                            Description = "Architecto beatae doloremque sint totam recusandae libero eligendi voluptas quas.",
                            FacilityId = 5,
                            IsAvailable = false,
                            Name = "Digitized 5th generation challenge"
                        },
                        new
                        {
                            Id = 22,
                            Capacity = 120,
                            Description = "Corrupti ea minima quis totam.",
                            FacilityId = 5,
                            IsAvailable = false,
                            Name = "Front-line tangible core"
                        },
                        new
                        {
                            Id = 23,
                            Capacity = 188,
                            Description = "Iste aut quibusdam sint cupiditate sequi architecto.",
                            FacilityId = 5,
                            IsAvailable = false,
                            Name = "Enterprise-wide multimedia methodology"
                        },
                        new
                        {
                            Id = 24,
                            Capacity = 65,
                            Description = "Sit nemo mollitia voluptatem accusamus aut dicta nesciunt qui optio.",
                            FacilityId = 5,
                            IsAvailable = false,
                            Name = "Optimized systemic internet solution"
                        },
                        new
                        {
                            Id = 25,
                            Capacity = 54,
                            Description = "Illum non facilis est nam voluptas.",
                            FacilityId = 5,
                            IsAvailable = true,
                            Name = "De-engineered encompassing model"
                        },
                        new
                        {
                            Id = 26,
                            Capacity = 99,
                            Description = "Officia quam omnis nihil velit optio dolores.",
                            FacilityId = 6,
                            IsAvailable = false,
                            Name = "Re-contextualized systematic monitoring"
                        },
                        new
                        {
                            Id = 27,
                            Capacity = 194,
                            Description = "Et qui id.",
                            FacilityId = 6,
                            IsAvailable = false,
                            Name = "Future-proofed 4th generation paradigm"
                        },
                        new
                        {
                            Id = 28,
                            Capacity = 127,
                            Description = "Laudantium quaerat veniam corrupti.",
                            FacilityId = 6,
                            IsAvailable = true,
                            Name = "Optimized global local area network"
                        },
                        new
                        {
                            Id = 29,
                            Capacity = 80,
                            Description = "Voluptate minima minima.",
                            FacilityId = 6,
                            IsAvailable = true,
                            Name = "Open-source asynchronous synergy"
                        },
                        new
                        {
                            Id = 30,
                            Capacity = 111,
                            Description = "Alias vero ipsam asperiores sint.",
                            FacilityId = 6,
                            IsAvailable = true,
                            Name = "Self-enabling zero tolerance secured line"
                        },
                        new
                        {
                            Id = 31,
                            Capacity = 78,
                            Description = "Necessitatibus officiis omnis iusto quidem incidunt ut.",
                            FacilityId = 7,
                            IsAvailable = true,
                            Name = "Persistent context-sensitive success"
                        },
                        new
                        {
                            Id = 32,
                            Capacity = 97,
                            Description = "Tenetur ratione aut quo molestias quam ut mollitia incidunt.",
                            FacilityId = 7,
                            IsAvailable = true,
                            Name = "Digitized attitude-oriented hub"
                        },
                        new
                        {
                            Id = 33,
                            Capacity = 195,
                            Description = "Eligendi aut voluptas.",
                            FacilityId = 7,
                            IsAvailable = true,
                            Name = "Proactive local intranet"
                        },
                        new
                        {
                            Id = 34,
                            Capacity = 134,
                            Description = "Reiciendis adipisci hic.",
                            FacilityId = 7,
                            IsAvailable = true,
                            Name = "Synergistic systematic function"
                        },
                        new
                        {
                            Id = 35,
                            Capacity = 67,
                            Description = "Cumque dolore ducimus ab eos architecto porro.",
                            FacilityId = 7,
                            IsAvailable = false,
                            Name = "Exclusive needs-based Graphic Interface"
                        },
                        new
                        {
                            Id = 36,
                            Capacity = 191,
                            Description = "Omnis asperiores sit nesciunt culpa non et illum ipsum.",
                            FacilityId = 8,
                            IsAvailable = true,
                            Name = "Vision-oriented context-sensitive monitoring"
                        },
                        new
                        {
                            Id = 37,
                            Capacity = 124,
                            Description = "Aut ut repellat rerum amet perferendis magni incidunt qui sunt.",
                            FacilityId = 8,
                            IsAvailable = false,
                            Name = "Triple-buffered fresh-thinking open system"
                        },
                        new
                        {
                            Id = 38,
                            Capacity = 86,
                            Description = "Labore eos officiis corrupti aut in.",
                            FacilityId = 8,
                            IsAvailable = false,
                            Name = "Open-source intangible matrices"
                        },
                        new
                        {
                            Id = 39,
                            Capacity = 95,
                            Description = "Sunt voluptatem qui similique.",
                            FacilityId = 8,
                            IsAvailable = true,
                            Name = "Reverse-engineered object-oriented protocol"
                        },
                        new
                        {
                            Id = 40,
                            Capacity = 132,
                            Description = "Mollitia debitis similique omnis eveniet et nulla.",
                            FacilityId = 8,
                            IsAvailable = true,
                            Name = "Inverse interactive standardization"
                        },
                        new
                        {
                            Id = 41,
                            Capacity = 172,
                            Description = "Modi adipisci consequatur et delectus est.",
                            FacilityId = 9,
                            IsAvailable = false,
                            Name = "Right-sized 24/7 moderator"
                        },
                        new
                        {
                            Id = 42,
                            Capacity = 107,
                            Description = "Molestiae fugit facere.",
                            FacilityId = 9,
                            IsAvailable = false,
                            Name = "Grass-roots systematic forecast"
                        },
                        new
                        {
                            Id = 43,
                            Capacity = 141,
                            Description = "Voluptas cum id esse est in autem.",
                            FacilityId = 9,
                            IsAvailable = false,
                            Name = "Fundamental reciprocal strategy"
                        },
                        new
                        {
                            Id = 44,
                            Capacity = 123,
                            Description = "Nulla vero quasi harum.",
                            FacilityId = 9,
                            IsAvailable = true,
                            Name = "Inverse directional neural-net"
                        },
                        new
                        {
                            Id = 45,
                            Capacity = 141,
                            Description = "Ratione perspiciatis sed ea autem natus aut.",
                            FacilityId = 9,
                            IsAvailable = true,
                            Name = "Triple-buffered impactful knowledge base"
                        },
                        new
                        {
                            Id = 46,
                            Capacity = 109,
                            Description = "Dolores sed recusandae reprehenderit facere eaque sit.",
                            FacilityId = 10,
                            IsAvailable = true,
                            Name = "Visionary hybrid parallelism"
                        },
                        new
                        {
                            Id = 47,
                            Capacity = 189,
                            Description = "Perspiciatis animi sunt voluptates molestias minima doloribus sed molestiae.",
                            FacilityId = 10,
                            IsAvailable = false,
                            Name = "Triple-buffered 3rd generation workforce"
                        },
                        new
                        {
                            Id = 48,
                            Capacity = 120,
                            Description = "Quae iure similique quo dolores aut eum iste.",
                            FacilityId = 10,
                            IsAvailable = true,
                            Name = "Sharable tangible orchestration"
                        },
                        new
                        {
                            Id = 49,
                            Capacity = 136,
                            Description = "Et ipsa dolorum facilis hic et consequatur dignissimos illo.",
                            FacilityId = 10,
                            IsAvailable = false,
                            Name = "Proactive composite concept"
                        },
                        new
                        {
                            Id = 50,
                            Capacity = 92,
                            Description = "Animi voluptas veniam excepturi.",
                            FacilityId = 10,
                            IsAvailable = false,
                            Name = "Realigned dedicated infrastructure"
                        });
                });

            modelBuilder.Entity("ECMS.Models.AreaEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("EventId");

                    b.ToTable("area_events");
                });

            modelBuilder.Entity("ECMS.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateOnly>("JoinDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("LastVisit")
                        .HasColumnType("date");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("customers");
                });

            modelBuilder.Entity("ECMS.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Eos voluptate ut sint et eum et sunt.",
                            EmployeeCount = 29,
                            Name = "Automotive"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Eaque expedita facilis placeat at reiciendis et aut ab vero.",
                            EmployeeCount = 19,
                            Name = "Industrial & Beauty"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Delectus molestiae nihil animi sint nulla delectus.",
                            EmployeeCount = 37,
                            Name = "Sports & Automotive"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Voluptatibus quod qui quo consequatur molestiae facilis voluptatem nisi.",
                            EmployeeCount = 14,
                            Name = "Jewelery, Kids & Computers"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Quam omnis qui ducimus optio.",
                            EmployeeCount = 20,
                            Name = "Clothing"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Est fugit architecto maiores inventore dicta eum aut rerum itaque.",
                            EmployeeCount = 15,
                            Name = "Kids, Games & Computers"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Illum sint vero vel.",
                            EmployeeCount = 48,
                            Name = "Movies, Garden & Beauty"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Dolore nemo facilis in qui voluptates natus atque.",
                            EmployeeCount = 19,
                            Name = "Music, Automotive & Outdoors"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Laborum optio placeat.",
                            EmployeeCount = 22,
                            Name = "Kids, Baby & Sports"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Aut vel blanditiis sit id culpa dolorem voluptatem ut et.",
                            EmployeeCount = 35,
                            Name = "Industrial"
                        });
                });

            modelBuilder.Entity("ECMS.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("HireDate")
                        .HasColumnType("date");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ShiftId")
                        .HasColumnType("int");

                    b.Property<int?>("SupervisorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.HasIndex("ShiftId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("ECMS.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrentAttendees")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventCategory")
                        .HasColumnType("int");

                    b.Property<int>("MaxAttendees")
                        .HasColumnType("int");

                    b.Property<decimal>("RegularPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("VipPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.ToTable("events");
                });

            modelBuilder.Entity("ECMS.Models.EventCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EventId");

                    b.HasIndex("TicketId");

                    b.ToTable("event_customers");
                });

            modelBuilder.Entity("ECMS.Models.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("facilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            Capacity = 322,
                            Description = "Repellendus autem cum qui dolores et esse.",
                            Name = "Doyle - O'Reilly"
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            Capacity = 455,
                            Description = "Eum eos ut repellendus modi nam dolorem est.",
                            Name = "Crist, Glover and Lakin"
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 3,
                            Capacity = 149,
                            Description = "Odio ducimus ducimus impedit asperiores voluptatum nihil.",
                            Name = "Haag - Thompson"
                        },
                        new
                        {
                            Id = 4,
                            AddressId = 4,
                            Capacity = 390,
                            Description = "Eum id aut distinctio ratione inventore est perspiciatis nulla voluptate.",
                            Name = "Schowalter Group"
                        },
                        new
                        {
                            Id = 5,
                            AddressId = 5,
                            Capacity = 479,
                            Description = "Cumque ea est explicabo.",
                            Name = "Lynch - Koch"
                        },
                        new
                        {
                            Id = 6,
                            AddressId = 6,
                            Capacity = 161,
                            Description = "Ut reprehenderit ea ratione repellendus reiciendis aperiam.",
                            Name = "Feil, Hane and Emard"
                        },
                        new
                        {
                            Id = 7,
                            AddressId = 7,
                            Capacity = 143,
                            Description = "Nihil sint consequatur dolor eum.",
                            Name = "O'Reilly, Wolf and Smith"
                        },
                        new
                        {
                            Id = 8,
                            AddressId = 8,
                            Capacity = 175,
                            Description = "Ut dolorum ad quia modi omnis.",
                            Name = "Rippin - Haley"
                        },
                        new
                        {
                            Id = 9,
                            AddressId = 9,
                            Capacity = 434,
                            Description = "Qui voluptas quas placeat omnis voluptatem adipisci aliquam quibusdam mollitia.",
                            Name = "Bruen, Schneider and Davis"
                        },
                        new
                        {
                            Id = 10,
                            AddressId = 10,
                            Capacity = 219,
                            Description = "Enim similique placeat et quia vel.",
                            Name = "Satterfield - Metz"
                        });
                });

            modelBuilder.Entity("ECMS.Models.FacilitySupplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("SupplierId");

                    b.ToTable("facility_suppliers");
                });

            modelBuilder.Entity("ECMS.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ECMS.Models.OrderProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("order_products");
                });

            modelBuilder.Entity("ECMS.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("persons");
                });

            modelBuilder.Entity("ECMS.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("products");
                });

            modelBuilder.Entity("ECMS.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfGuests")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservationFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReservationTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("reservations");
                });

            modelBuilder.Entity("ECMS.Models.ReservationArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("ReservationId");

                    b.ToTable("reservation_areas");
                });

            modelBuilder.Entity("ECMS.Models.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FromHour")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShiftType")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToHour")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("shifts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FromHour = new DateTime(2024, 1, 10, 18, 29, 44, 839, DateTimeKind.Local).AddTicks(5959),
                            ShiftType = 2,
                            ToHour = new DateTime(2024, 8, 18, 19, 43, 42, 794, DateTimeKind.Local).AddTicks(989)
                        },
                        new
                        {
                            Id = 2,
                            FromHour = new DateTime(2024, 4, 25, 23, 23, 4, 261, DateTimeKind.Local).AddTicks(1895),
                            ShiftType = 3,
                            ToHour = new DateTime(2024, 7, 6, 10, 56, 50, 88, DateTimeKind.Local).AddTicks(8409)
                        },
                        new
                        {
                            Id = 3,
                            FromHour = new DateTime(2024, 1, 28, 16, 17, 57, 740, DateTimeKind.Local).AddTicks(5578),
                            ShiftType = 3,
                            ToHour = new DateTime(2025, 1, 16, 0, 27, 41, 986, DateTimeKind.Local).AddTicks(3098)
                        },
                        new
                        {
                            Id = 4,
                            FromHour = new DateTime(2024, 4, 2, 10, 10, 56, 871, DateTimeKind.Local).AddTicks(5237),
                            ShiftType = 1,
                            ToHour = new DateTime(2025, 5, 13, 19, 44, 31, 104, DateTimeKind.Local).AddTicks(7812)
                        },
                        new
                        {
                            Id = 5,
                            FromHour = new DateTime(2023, 7, 12, 7, 22, 47, 222, DateTimeKind.Local).AddTicks(9282),
                            ShiftType = 3,
                            ToHour = new DateTime(2025, 5, 26, 13, 36, 39, 785, DateTimeKind.Local).AddTicks(1853)
                        },
                        new
                        {
                            Id = 6,
                            FromHour = new DateTime(2023, 8, 28, 19, 48, 47, 13, DateTimeKind.Local).AddTicks(1254),
                            ShiftType = 1,
                            ToHour = new DateTime(2025, 4, 12, 13, 1, 49, 215, DateTimeKind.Local).AddTicks(9857)
                        },
                        new
                        {
                            Id = 7,
                            FromHour = new DateTime(2024, 4, 3, 18, 34, 50, 538, DateTimeKind.Local).AddTicks(399),
                            ShiftType = 1,
                            ToHour = new DateTime(2024, 12, 1, 18, 13, 53, 223, DateTimeKind.Local).AddTicks(6128)
                        },
                        new
                        {
                            Id = 8,
                            FromHour = new DateTime(2024, 3, 4, 11, 4, 20, 505, DateTimeKind.Local).AddTicks(1771),
                            ShiftType = 1,
                            ToHour = new DateTime(2024, 12, 20, 2, 34, 7, 480, DateTimeKind.Local).AddTicks(2132)
                        },
                        new
                        {
                            Id = 9,
                            FromHour = new DateTime(2023, 8, 27, 10, 6, 9, 918, DateTimeKind.Local).AddTicks(6500),
                            ShiftType = 2,
                            ToHour = new DateTime(2024, 12, 29, 10, 57, 11, 91, DateTimeKind.Local).AddTicks(7515)
                        },
                        new
                        {
                            Id = 10,
                            FromHour = new DateTime(2024, 5, 2, 8, 39, 20, 851, DateTimeKind.Local).AddTicks(1579),
                            ShiftType = 1,
                            ToHour = new DateTime(2025, 4, 1, 8, 46, 11, 312, DateTimeKind.Local).AddTicks(7788)
                        });
                });

            modelBuilder.Entity("ECMS.Models.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("suppliers");
                });

            modelBuilder.Entity("ECMS.Models.SupplierProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId");

                    b.ToTable("supplier_products");
                });

            modelBuilder.Entity("ECMS.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsSeated")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SeatNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("tickets");
                });

            modelBuilder.Entity("ECMS.Models.Area", b =>
                {
                    b.HasOne("ECMS.Models.Facility", "Facility")
                        .WithMany("Areas")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("ECMS.Models.AreaEvent", b =>
                {
                    b.HasOne("ECMS.Models.Area", "Area")
                        .WithMany("AreaEvents")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Event", "Event")
                        .WithMany("AreaEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ECMS.Models.Customer", b =>
                {
                    b.HasOne("ECMS.Models.Person", "Person")
                        .WithOne("Customer")
                        .HasForeignKey("ECMS.Models.Customer", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ECMS.Models.Employee", b =>
                {
                    b.HasOne("ECMS.Models.Area", "Area")
                        .WithMany("Employees")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("ECMS.Models.Person", "Person")
                        .WithOne("Employee")
                        .HasForeignKey("ECMS.Models.Employee", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Shift", "Shift")
                        .WithMany("Employees")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Employee", "Supervisor")
                        .WithMany()
                        .HasForeignKey("SupervisorId");

                    b.Navigation("Area");

                    b.Navigation("Department");

                    b.Navigation("Person");

                    b.Navigation("Shift");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("ECMS.Models.EventCustomer", b =>
                {
                    b.HasOne("ECMS.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Event", "Event")
                        .WithMany("EventCustomers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Ticket", "Ticket")
                        .WithMany("EventCustomers")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Event");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("ECMS.Models.Facility", b =>
                {
                    b.HasOne("ECMS.Models.Address", "Address")
                        .WithMany("Facilities")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("ECMS.Models.FacilitySupplier", b =>
                {
                    b.HasOne("ECMS.Models.Facility", "Facility")
                        .WithMany("FacilitySuppliers")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Supplier", "Supplier")
                        .WithMany("FacilitySuppliers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("ECMS.Models.Order", b =>
                {
                    b.HasOne("ECMS.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ECMS.Models.OrderProduct", b =>
                {
                    b.HasOne("ECMS.Models.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECMS.Models.Reservation", b =>
                {
                    b.HasOne("ECMS.Models.Customer", null)
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("ECMS.Models.ReservationArea", b =>
                {
                    b.HasOne("ECMS.Models.Area", "Area")
                        .WithMany("ReservationAreas")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Reservation", "Reservation")
                        .WithMany("ReservationAreas")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("ECMS.Models.Supplier", b =>
                {
                    b.HasOne("ECMS.Models.Address", "Address")
                        .WithMany("Suppliers")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("ECMS.Models.SupplierProduct", b =>
                {
                    b.HasOne("ECMS.Models.Product", "Product")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECMS.Models.Supplier", "Supplier")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("ECMS.Models.Address", b =>
                {
                    b.Navigation("Facilities");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("ECMS.Models.Area", b =>
                {
                    b.Navigation("AreaEvents");

                    b.Navigation("Employees");

                    b.Navigation("ReservationAreas");
                });

            modelBuilder.Entity("ECMS.Models.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("ECMS.Models.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ECMS.Models.Event", b =>
                {
                    b.Navigation("AreaEvents");

                    b.Navigation("EventCustomers");
                });

            modelBuilder.Entity("ECMS.Models.Facility", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("FacilitySuppliers");
                });

            modelBuilder.Entity("ECMS.Models.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("ECMS.Models.Person", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("Employee")
                        .IsRequired();
                });

            modelBuilder.Entity("ECMS.Models.Product", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("SupplierProducts");
                });

            modelBuilder.Entity("ECMS.Models.Reservation", b =>
                {
                    b.Navigation("ReservationAreas");
                });

            modelBuilder.Entity("ECMS.Models.Shift", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ECMS.Models.Supplier", b =>
                {
                    b.Navigation("FacilitySuppliers");

                    b.Navigation("SupplierProducts");
                });

            modelBuilder.Entity("ECMS.Models.Ticket", b =>
                {
                    b.Navigation("EventCustomers");
                });
#pragma warning restore 612, 618
        }
    }
}
